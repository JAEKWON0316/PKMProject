// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
  vaults        Vault[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  vaultId   String?
  source    String   @default("chatgpt") // chatgpt, cursor, other
  summary   String?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vault   Vault?   @relation(fields: [vaultId], references: [id])
  tags    Tag[]    @relation("ConversationToTag")
  messages Message[]

  @@index([userId])
  @@index([vaultId])
}

model Message {
  id             String   @id @default(cuid())
  role           String   // 'user' or 'assistant'
  content        String
  createdAt      DateTime @default(now())
  conversationId String

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model Vault {
  id          String   @id @default(cuid())
  name        String
  path        String   // Obsidian vault path
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  tags          Tag[]          @relation("VaultToTag")

  @@index([userId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversations Conversation[] @relation("ConversationToTag")
  vaults        Vault[]        @relation("VaultToTag")
} 