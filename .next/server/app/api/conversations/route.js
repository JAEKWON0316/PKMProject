"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/conversations/route";
exports.ids = ["app/api/conversations/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "@sparticuz/chromium":
/*!**************************************!*\
  !*** external "@sparticuz/chromium" ***!
  \**************************************/
/***/ ((module) => {

module.exports = require("@sparticuz/chromium");

/***/ }),

/***/ "puppeteer-core":
/*!*********************************!*\
  !*** external "puppeteer-core" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("puppeteer-core");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fconversations%2Froute&page=%2Fapi%2Fconversations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fconversations%2Froute.ts&appDir=C%3A%5CpmkProject%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CpmkProject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fconversations%2Froute&page=%2Fapi%2Fconversations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fconversations%2Froute.ts&appDir=C%3A%5CpmkProject%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CpmkProject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_pmkProject_src_app_api_conversations_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/conversations/route.ts */ \"(rsc)/./src/app/api/conversations/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/conversations/route\",\n        pathname: \"/api/conversations\",\n        filename: \"route\",\n        bundlePath: \"app/api/conversations/route\"\n    },\n    resolvedPagePath: \"C:\\\\pmkProject\\\\src\\\\app\\\\api\\\\conversations\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_pmkProject_src_app_api_conversations_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/conversations/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjb252ZXJzYXRpb25zJTJGcm91dGUmcGFnZT0lMkZhcGklMkZjb252ZXJzYXRpb25zJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY29udmVyc2F0aW9ucyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDcG1rUHJvamVjdCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q3Bta1Byb2plY3QmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ007QUFDbkY7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1R0FBdUc7QUFDL0c7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUM2Sjs7QUFFN0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wa20tcHJvamVjdC8/OTMyOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxwbWtQcm9qZWN0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGNvbnZlcnNhdGlvbnNcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwic3RhbmRhbG9uZVwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jb252ZXJzYXRpb25zL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvY29udmVyc2F0aW9uc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvY29udmVyc2F0aW9ucy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXHBta1Byb2plY3RcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcY29udmVyc2F0aW9uc1xcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9jb252ZXJzYXRpb25zL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fconversations%2Froute&page=%2Fapi%2Fconversations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fconversations%2Froute.ts&appDir=C%3A%5CpmkProject%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CpmkProject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/conversations/route.ts":
/*!********************************************!*\
  !*** ./src/app/api/conversations/route.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _utils_conversationHandler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/conversationHandler */ \"(rsc)/./src/utils/conversationHandler.ts\");\n\n\nasync function POST(request) {\n    try {\n        console.log(\"=== Processing conversation request ===\");\n        const body = await request.json().catch((e)=>{\n            console.error(\"Failed to parse request body:\", e);\n            return null;\n        });\n        if (!body || !body.url) {\n            console.error(\"Missing URL in request body\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"ChatGPT 공유 URL이 필요합니다.\"\n            }, {\n                status: 400\n            });\n        }\n        const { url, options = {\n            saveToSupabase: true,\n            saveToObsidian: true,\n            saveAsJson: true\n        } } = body;\n        console.log(`Processing URL: \"${url}\"`);\n        console.log(`Save options:`, options);\n        // 통합 저장 핸들러 호출\n        const result = await (0,_utils_conversationHandler__WEBPACK_IMPORTED_MODULE_1__.saveConversation)(url, options);\n        if (!result.success) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: result.error || \"대화 처리 중 오류가 발생했습니다.\"\n            }, {\n                status: 500\n            });\n        }\n        // 중복 URL 처리\n        if (result.duplicate) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: true,\n                duplicate: true,\n                message: \"이미 저장된 대화입니다.\",\n                data: {\n                    id: result.id,\n                    title: result.title,\n                    url\n                }\n            });\n        }\n        // 성공 응답\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            data: {\n                conversation: {\n                    id: result.id,\n                    title: result.title\n                },\n                summary: result.summary,\n                keywords: result.keywords,\n                obsidian: result.obsidian,\n                jsonBackup: result.jsonBackup\n            }\n        });\n    } catch (error) {\n        console.error(\"Error processing conversation:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: error instanceof Error ? error.message : \"대화 처리 중 오류가 발생했습니다.\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9jb252ZXJzYXRpb25zL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQztBQUNvQjtBQUV2RCxlQUFlRSxLQUFLQyxPQUFnQjtJQUN6QyxJQUFJO1FBQ0ZDLFFBQVFDLEdBQUcsQ0FBQztRQUVaLE1BQU1DLE9BQU8sTUFBTUgsUUFBUUksSUFBSSxHQUFHQyxLQUFLLENBQUNDLENBQUFBO1lBQ3RDTCxRQUFRTSxLQUFLLENBQUMsaUNBQWlDRDtZQUMvQyxPQUFPO1FBQ1Q7UUFFQSxJQUFJLENBQUNILFFBQVEsQ0FBQ0EsS0FBS0ssR0FBRyxFQUFFO1lBQ3RCUCxRQUFRTSxLQUFLLENBQUM7WUFDZCxPQUFPVixrRkFBWUEsQ0FBQ08sSUFBSSxDQUN0QjtnQkFBRUssU0FBUztnQkFBT0YsT0FBTztZQUF5QixHQUNsRDtnQkFBRUcsUUFBUTtZQUFJO1FBRWxCO1FBRUEsTUFBTSxFQUFFRixHQUFHLEVBQUVHLFVBQVU7WUFDckJDLGdCQUFnQjtZQUNoQkMsZ0JBQWdCO1lBQ2hCQyxZQUFZO1FBQ2QsQ0FBQyxFQUFFLEdBQUdYO1FBRU5GLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLGlCQUFpQixFQUFFTSxJQUFJLENBQUMsQ0FBQztRQUN0Q1AsUUFBUUMsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLEVBQUVTO1FBRTdCLGVBQWU7UUFDZixNQUFNSSxTQUFTLE1BQU1qQiw0RUFBZ0JBLENBQUNVLEtBQUtHO1FBRTNDLElBQUksQ0FBQ0ksT0FBT04sT0FBTyxFQUFFO1lBQ25CLE9BQU9aLGtGQUFZQSxDQUFDTyxJQUFJLENBQ3RCO2dCQUFFSyxTQUFTO2dCQUFPRixPQUFPUSxPQUFPUixLQUFLLElBQUk7WUFBc0IsR0FDL0Q7Z0JBQUVHLFFBQVE7WUFBSTtRQUVsQjtRQUVBLFlBQVk7UUFDWixJQUFJSyxPQUFPQyxTQUFTLEVBQUU7WUFDcEIsT0FBT25CLGtGQUFZQSxDQUFDTyxJQUFJLENBQUM7Z0JBQ3ZCSyxTQUFTO2dCQUNUTyxXQUFXO2dCQUNYQyxTQUFTO2dCQUNUQyxNQUFNO29CQUNKQyxJQUFJSixPQUFPSSxFQUFFO29CQUNiQyxPQUFPTCxPQUFPSyxLQUFLO29CQUNuQlo7Z0JBQ0Y7WUFDRjtRQUNGO1FBRUEsUUFBUTtRQUNSLE9BQU9YLGtGQUFZQSxDQUFDTyxJQUFJLENBQUM7WUFDdkJLLFNBQVM7WUFDVFMsTUFBTTtnQkFDSkcsY0FBYztvQkFDWkYsSUFBSUosT0FBT0ksRUFBRTtvQkFDYkMsT0FBT0wsT0FBT0ssS0FBSztnQkFDckI7Z0JBQ0FFLFNBQVNQLE9BQU9PLE9BQU87Z0JBQ3ZCQyxVQUFVUixPQUFPUSxRQUFRO2dCQUN6QkMsVUFBVVQsT0FBT1MsUUFBUTtnQkFDekJDLFlBQVlWLE9BQU9VLFVBQVU7WUFDL0I7UUFDRjtJQUNGLEVBQUUsT0FBT2xCLE9BQU87UUFDZE4sUUFBUU0sS0FBSyxDQUFDLGtDQUFrQ0E7UUFDaEQsT0FBT1Ysa0ZBQVlBLENBQUNPLElBQUksQ0FDdEI7WUFDRUssU0FBUztZQUNURixPQUFPQSxpQkFBaUJtQixRQUFRbkIsTUFBTVUsT0FBTyxHQUFHO1FBQ2xELEdBQ0E7WUFBRVAsUUFBUTtRQUFJO0lBRWxCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wa20tcHJvamVjdC8uL3NyYy9hcHAvYXBpL2NvbnZlcnNhdGlvbnMvcm91dGUudHM/ZmY1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcidcbmltcG9ydCB7IHNhdmVDb252ZXJzYXRpb24gfSBmcm9tICdAL3V0aWxzL2NvbnZlcnNhdGlvbkhhbmRsZXInXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IFJlcXVlc3QpOiBQcm9taXNlPFJlc3BvbnNlPiB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coJz09PSBQcm9jZXNzaW5nIGNvbnZlcnNhdGlvbiByZXF1ZXN0ID09PScpO1xuICAgIFxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKS5jYXRjaChlID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSByZXF1ZXN0IGJvZHk6JywgZSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcbiAgICBcbiAgICBpZiAoIWJvZHkgfHwgIWJvZHkudXJsKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNaXNzaW5nIFVSTCBpbiByZXF1ZXN0IGJvZHknKTtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdDaGF0R1BUIOqzteycoCBVUkzsnbQg7ZWE7JqU7ZWp64uI64ukLicgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCB7IHVybCwgb3B0aW9ucyA9IHsgXG4gICAgICBzYXZlVG9TdXBhYmFzZTogdHJ1ZSwgXG4gICAgICBzYXZlVG9PYnNpZGlhbjogdHJ1ZSwgXG4gICAgICBzYXZlQXNKc29uOiB0cnVlIFxuICAgIH0gfSA9IGJvZHk7XG4gICAgXG4gICAgY29uc29sZS5sb2coYFByb2Nlc3NpbmcgVVJMOiBcIiR7dXJsfVwiYCk7XG4gICAgY29uc29sZS5sb2coYFNhdmUgb3B0aW9uczpgLCBvcHRpb25zKTtcblxuICAgIC8vIO2Gte2VqSDsoIDsnqUg7ZW465Ok65+sIO2YuOy2nFxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNhdmVDb252ZXJzYXRpb24odXJsLCBvcHRpb25zKTtcbiAgICBcbiAgICBpZiAoIXJlc3VsdC5zdWNjZXNzKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiByZXN1bHQuZXJyb3IgfHwgJ+uMgO2ZlCDsspjrpqwg7KSRIOyYpOulmOqwgCDrsJzsg53tlojsirXri4jri6QuJyB9LFxuICAgICAgICB7IHN0YXR1czogNTAwIH1cbiAgICAgICk7XG4gICAgfVxuICAgIFxuICAgIC8vIOykkeuztSBVUkwg7LKY66asXG4gICAgaWYgKHJlc3VsdC5kdXBsaWNhdGUpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIGR1cGxpY2F0ZTogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogJ+ydtOuvuCDsoIDsnqXrkJwg64yA7ZmU7J6F64uI64ukLicsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBpZDogcmVzdWx0LmlkLFxuICAgICAgICAgIHRpdGxlOiByZXN1bHQudGl0bGUsXG4gICAgICAgICAgdXJsXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICAvLyDshLHqs7Ug7J2R64u1XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICBkYXRhOiB7XG4gICAgICAgIGNvbnZlcnNhdGlvbjoge1xuICAgICAgICAgIGlkOiByZXN1bHQuaWQsXG4gICAgICAgICAgdGl0bGU6IHJlc3VsdC50aXRsZVxuICAgICAgICB9LFxuICAgICAgICBzdW1tYXJ5OiByZXN1bHQuc3VtbWFyeSxcbiAgICAgICAga2V5d29yZHM6IHJlc3VsdC5rZXl3b3JkcyxcbiAgICAgICAgb2JzaWRpYW46IHJlc3VsdC5vYnNpZGlhbixcbiAgICAgICAganNvbkJhY2t1cDogcmVzdWx0Lmpzb25CYWNrdXBcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcm9jZXNzaW5nIGNvbnZlcnNhdGlvbjonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgeyBcbiAgICAgICAgc3VjY2VzczogZmFsc2UsIFxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAn64yA7ZmUIOyymOumrCDspJEg7Jik66WY6rCAIOuwnOyDne2WiOyKteuLiOuLpC4nIFxuICAgICAgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn0iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwic2F2ZUNvbnZlcnNhdGlvbiIsIlBPU1QiLCJyZXF1ZXN0IiwiY29uc29sZSIsImxvZyIsImJvZHkiLCJqc29uIiwiY2F0Y2giLCJlIiwiZXJyb3IiLCJ1cmwiLCJzdWNjZXNzIiwic3RhdHVzIiwib3B0aW9ucyIsInNhdmVUb1N1cGFiYXNlIiwic2F2ZVRvT2JzaWRpYW4iLCJzYXZlQXNKc29uIiwicmVzdWx0IiwiZHVwbGljYXRlIiwibWVzc2FnZSIsImRhdGEiLCJpZCIsInRpdGxlIiwiY29udmVyc2F0aW9uIiwic3VtbWFyeSIsImtleXdvcmRzIiwib2JzaWRpYW4iLCJqc29uQmFja3VwIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/conversations/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getClientSupabase: () => (/* binding */ getClientSupabase),\n/* harmony export */   getServerSupabase: () => (/* binding */ getServerSupabase),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin),\n/* harmony export */   supabaseClient: () => (/* binding */ supabaseClient),\n/* harmony export */   testSupabaseConnection: () => (/* binding */ testSupabaseConnection)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Supabase Client\nconst supabaseUrl = \"https://ghtqqcoyakjozzhegktl.supabase.co\" || 0;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY || \"\";\n// 서비스 키를 사용한 클라이언트 (백엔드 전용) - RLS 우회\nconst supabaseAdmin = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey);\n// 익명 키를 사용한 클라이언트 (프론트엔드 안전)\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdodHFxY295YWtqb=\\\"\\\"3p6aGVna3RsIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NjA4NjkwMywiZXhwIjoyMDYxNjYyOTAzfQ.3Ygn7Ql9okDXtYnTblDXKLg2wXge1tHhm5Zok_N283k\" || 0;\nconst supabaseClient = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n/**\r\n * 백엔드 API에서 사용할 Supabase 클라이언트 인스턴스를 반환합니다.\r\n * RLS 정책을 우회할 수 있는 서비스 키를 사용합니다.\r\n */ function getServerSupabase() {\n    return supabaseAdmin;\n}\n/**\r\n * 브라우저에서 사용할 Supabase 클라이언트 인스턴스를 반환합니다.\r\n * RLS 정책이 적용된 익명 키를 사용합니다.\r\n */ function getClientSupabase() {\n    return supabaseClient;\n}\n// Supabase 연결 테스트 함수\nasync function testSupabaseConnection() {\n    try {\n        // 환경 변수만 확인\n        if (!supabaseUrl) {\n            throw new Error(\"Supabase URL이 설정되지 않았습니다\");\n        }\n        if (!supabaseServiceKey) {\n            throw new Error(\"Supabase 서비스 키가 설정되지 않았습니다\");\n        }\n        if (!supabaseAnonKey) {\n            throw new Error(\"Supabase 익명 키가 설정되지 않았습니다\");\n        }\n        return {\n            success: true,\n            message: \"Supabase 환경 변수 확인 완료, 마이그레이션을 진행합니다.\"\n        };\n    } catch (error) {\n        console.error(\"Supabase 연결 테스트 오류:\", error);\n        return {\n            success: false,\n            message: error instanceof Error ? error.message : \"알 수 없는 오류\"\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N1cGFiYXNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxRDtBQUVyRCxrQkFBa0I7QUFDbEIsTUFBTUMsY0FBY0MsMENBQW9DLElBQUk7QUFDNUQsTUFBTUcscUJBQXFCSCxRQUFRQyxHQUFHLENBQUNHLG9CQUFvQixJQUFJO0FBRS9ELHFDQUFxQztBQUM5QixNQUFNQyxnQkFBZ0JQLG1FQUFZQSxDQUFDQyxhQUFhSSxvQkFBb0I7QUFFM0UsNkJBQTZCO0FBQzdCLE1BQU1HLGtCQUFrQk4sa09BQXlDLElBQUk7QUFDOUQsTUFBTVEsaUJBQWlCVixtRUFBWUEsQ0FBQ0MsYUFBYU8saUJBQWlCO0FBRXpFOzs7Q0FHQyxHQUNNLFNBQVNHO0lBQ2QsT0FBT0o7QUFDVDtBQUVBOzs7Q0FHQyxHQUNNLFNBQVNLO0lBQ2QsT0FBT0Y7QUFDVDtBQUVBLHFCQUFxQjtBQUNkLGVBQWVHO0lBQ3BCLElBQUk7UUFDRixZQUFZO1FBQ1osSUFBSSxDQUFDWixhQUFhO1lBQ2hCLE1BQU0sSUFBSWEsTUFBTTtRQUNsQjtRQUVBLElBQUksQ0FBQ1Qsb0JBQW9CO1lBQ3ZCLE1BQU0sSUFBSVMsTUFBTTtRQUNsQjtRQUVBLElBQUksQ0FBQ04saUJBQWlCO1lBQ3BCLE1BQU0sSUFBSU0sTUFBTTtRQUNsQjtRQUVBLE9BQU87WUFDTEMsU0FBUztZQUNUQyxTQUFTO1FBQ1g7SUFDRixFQUFFLE9BQU9DLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLHVCQUF1QkE7UUFDckMsT0FBTztZQUNMRixTQUFTO1lBQ1RDLFNBQVNDLGlCQUFpQkgsUUFBUUcsTUFBTUQsT0FBTyxHQUFHO1FBQ3BEO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3BrbS1wcm9qZWN0Ly4vc3JjL2xpYi9zdXBhYmFzZS50cz8wNmUxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcyc7XHJcblxyXG4vLyBTdXBhYmFzZSBDbGllbnRcclxuY29uc3Qgc3VwYWJhc2VVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwgfHwgJyc7XHJcbmNvbnN0IHN1cGFiYXNlU2VydmljZUtleSA9IHByb2Nlc3MuZW52LlNVUEFCQVNFX1NFUlZJQ0VfS0VZIHx8ICcnO1xyXG5cclxuLy8g7ISc67mE7IqkIO2CpOulvCDsgqzsmqntlZwg7YG065287J207Ja47Yq4ICjrsLHsl5Trk5wg7KCE7JqpKSAtIFJMUyDsmrDtmoxcclxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlQWRtaW4gPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlU2VydmljZUtleSk7XHJcblxyXG4vLyDsnbXrqoUg7YKk66W8IOyCrOyaqe2VnCDtgbTrnbzsnbTslrjtirggKO2UhOuhoO2KuOyXlOuTnCDslYjsoIQpXHJcbmNvbnN0IHN1cGFiYXNlQW5vbktleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIHx8ICcnO1xyXG5leHBvcnQgY29uc3Qgc3VwYWJhc2VDbGllbnQgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSk7XHJcblxyXG4vKipcclxuICog67Cx7JeU65OcIEFQSeyXkOyEnCDsgqzsmqntlaAgU3VwYWJhc2Ug7YG065287J207Ja47Yq4IOyduOyKpO2EtOyKpOulvCDrsJjtmZjtlanri4jri6QuXHJcbiAqIFJMUyDsoJXssYXsnYQg7Jqw7ZqM7ZWgIOyImCDsnojripQg7ISc67mE7IqkIO2CpOulvCDsgqzsmqntlanri4jri6QuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VydmVyU3VwYWJhc2UoKSB7XHJcbiAgcmV0dXJuIHN1cGFiYXNlQWRtaW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDruIzrnbzsmrDsoIDsl5DshJwg7IKs7Jqp7ZWgIFN1cGFiYXNlIO2BtOudvOydtOyWuO2KuCDsnbjsiqTthLTsiqTrpbwg67CY7ZmY7ZWp64uI64ukLlxyXG4gKiBSTFMg7KCV7LGF7J20IOyggeyaqeuQnCDsnbXrqoUg7YKk66W8IOyCrOyaqe2VqeuLiOuLpC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDbGllbnRTdXBhYmFzZSgpIHtcclxuICByZXR1cm4gc3VwYWJhc2VDbGllbnQ7XHJcbn1cclxuXHJcbi8vIFN1cGFiYXNlIOyXsOqysCDthYzsiqTtirgg7ZWo7IiYXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXN0U3VwYWJhc2VDb25uZWN0aW9uKCkge1xyXG4gIHRyeSB7XHJcbiAgICAvLyDtmZjqsr0g67OA7IiY66eMIO2ZleyduFxyXG4gICAgaWYgKCFzdXBhYmFzZVVybCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cGFiYXNlIFVSTOydtCDshKTsoJXrkJjsp4Ag7JWK7JWY7Iq164uI64ukJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICghc3VwYWJhc2VTZXJ2aWNlS2V5KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwYWJhc2Ug7ISc67mE7IqkIO2CpOqwgCDshKTsoJXrkJjsp4Ag7JWK7JWY7Iq164uI64ukJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICghc3VwYWJhc2VBbm9uS2V5KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwYWJhc2Ug7J2166qFIO2CpOqwgCDshKTsoJXrkJjsp4Ag7JWK7JWY7Iq164uI64ukJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiB7IFxyXG4gICAgICBzdWNjZXNzOiB0cnVlLCBcclxuICAgICAgbWVzc2FnZTogJ1N1cGFiYXNlIO2ZmOqyvSDrs4DsiJgg7ZmV7J24IOyZhOujjCwg66eI7J206re466CI7J207IWY7J2EIOynhO2Wie2VqeuLiOuLpC4nIFxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignU3VwYWJhc2Ug7Jew6rKwIO2FjOyKpO2KuCDsmKTrpZg6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIHsgXHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcclxuICAgICAgbWVzc2FnZTogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAn7JWMIOyImCDsl4bripQg7Jik66WYJyBcclxuICAgIH07XHJcbiAgfVxyXG59ICJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJzdXBhYmFzZVVybCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJzdXBhYmFzZVNlcnZpY2VLZXkiLCJTVVBBQkFTRV9TRVJWSUNFX0tFWSIsInN1cGFiYXNlQWRtaW4iLCJzdXBhYmFzZUFub25LZXkiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsInN1cGFiYXNlQ2xpZW50IiwiZ2V0U2VydmVyU3VwYWJhc2UiLCJnZXRDbGllbnRTdXBhYmFzZSIsInRlc3RTdXBhYmFzZUNvbm5lY3Rpb24iLCJFcnJvciIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwiZXJyb3IiLCJjb25zb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/utils/chatgpt.ts":
/*!**********************************!*\
  !*** ./src/lib/utils/chatgpt.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseChatGPTLink: () => (/* binding */ parseChatGPTLink)\n/* harmony export */ });\n/* harmony import */ var private_next_rsc_action_proxy__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! private-next-rsc-action-proxy */ \"(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-proxy.js\");\n/* harmony import */ var private_next_rsc_action_encryption__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! private-next-rsc-action-encryption */ \"(rsc)/./node_modules/next/dist/server/app-render/action-encryption.js\");\n/* harmony import */ var private_next_rsc_action_encryption__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(private_next_rsc_action_encryption__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/types */ \"(rsc)/./src/types.ts\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var private_next_rsc_action_validate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! private-next-rsc-action-validate */ \"(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-validate.js\");\n// 서버 전용 컴포넌트/유틸 표시\n/* __next_internal_action_entry_do_not_use__ {\"491c471e7f9b8d25a45396e01470b054e19a90ee\":\"parseChatGPTLink\"} */ \n\n// Playwright 관련 import 주석 처리\n// import { chromium, Browser, Page } from 'playwright';\n\n\n\n// Puppeteer와 Chromium 추가 - 서버 사이드에서만 실행\n// @ts-ignore - @sparticuz/chromium 모듈 타입 선언 문제 해결\nconst puppeteer = __webpack_require__(/*! puppeteer-core */ \"puppeteer-core\");\n// @ts-ignore - 타입 오류 무시\nconst chromium = __webpack_require__(/*! @sparticuz/chromium */ \"@sparticuz/chromium\");\n// 클라이언트 측에서는 실행되지 않도록 함\nif (false) {}\n// 운영체제 감지\nconst isWindows = process.platform === \"win32\";\nconst isVercel = process.env.VERCEL === \"1\";\n/**\n * 환경에 맞는 Chromium 실행 경로 가져오기\n */ async function getChromiumPath() {\n    try {\n        // Windows 환경인 경우 로컬에서 Chrome 실행 시도\n        if (isWindows) {\n            // Windows 환경에서는 설치된 Chrome 사용 시도\n            const localChromePaths = [\n                \"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\n                \"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\",\n                process.env.LOCALAPPDATA + \"\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\"\n            ];\n            // 존재하는 Chrome 경로 찾기\n            for (const chromePath of localChromePaths){\n                if (fs__WEBPACK_IMPORTED_MODULE_4___default().existsSync(chromePath)) {\n                    console.log(`Using local Chrome at: ${chromePath}`);\n                    return chromePath;\n                }\n            }\n            console.log(\"No local Chrome installation found, using @sparticuz/chromium fallback\");\n        }\n        // @sparticuz/chromium의 executablePath 함수를 사용하여 바이너리 경로 가져오기\n        const execPath = await chromium.executablePath();\n        console.log(`Chromium executable path: ${execPath}`);\n        // Windows에서 로컬 폴더 생성\n        if (isWindows) {\n            const localChromiumPath = path__WEBPACK_IMPORTED_MODULE_3___default().join(process.cwd(), \".chromium\");\n            if (!fs__WEBPACK_IMPORTED_MODULE_4___default().existsSync(localChromiumPath)) {\n                console.log(`Creating local Chromium directory: ${localChromiumPath}`);\n                fs__WEBPACK_IMPORTED_MODULE_4___default().mkdirSync(localChromiumPath, {\n                    recursive: true\n                });\n            }\n        }\n        // 파일이 실제로 존재하는지 확인\n        if (!fs__WEBPACK_IMPORTED_MODULE_4___default().existsSync(execPath)) {\n            throw new Error(`Chromium executable not found at path: ${execPath}`);\n        }\n        return execPath;\n    } catch (error) {\n        console.error(\"Error getting Chromium path:\", error);\n        // 오류 발생 시 로컬 Chrome 시도\n        if (isWindows) {\n            const defaultChromePath = \"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\";\n            if (fs__WEBPACK_IMPORTED_MODULE_4___default().existsSync(defaultChromePath)) {\n                console.log(`Fallback to local Chrome: ${defaultChromePath}`);\n                return defaultChromePath;\n            }\n        }\n        throw error;\n    }\n}\n/**\n * 주어진 ChatGPT 대화 URL에서 대화 내용과 전체 페이지 내용을 스크래핑하는 함수\n */ async function parseChatGPTLink(url) {\n    console.log(`Scraping ChatGPT conversation from URL: ${url}`);\n    // let browser: Browser | null = null;\n    let browser = null;\n    try {\n        // 브라우저 경로 디버깅 로그\n        console.log(\"=== Browser Path Debug Info ===\");\n        console.log(\"CHROMIUM_PATH:\", \"C:\\\\pmkProject\\\\.chromium\");\n        // Playwright 코드 주석 처리\n        /*\n    // 가능한 실행 파일 경로들\n    const possiblePaths = [\n      `${process.env.PLAYWRIGHT_BROWSERS_PATH}/chromium_headless_shell-1169/headless_shell`,\n      `${process.env.PLAYWRIGHT_BROWSERS_PATH}/chromium_headless_shell-1169/chrome-linux/headless_shell`,\n      `${process.env.PLAYWRIGHT_BROWSERS_PATH}/chromium-1169/chrome-linux/chrome`,\n      `${process.env.PLAYWRIGHT_BROWSERS_PATH}/chromium-1169/chrome-win/chrome.exe`,\n      `${process.env.PLAYWRIGHT_BROWSERS_PATH}/chromium/chrome-linux/chrome`,\n      // Ubuntu 20.04 fallback 경로 추가\n      `${process.env.PLAYWRIGHT_BROWSERS_PATH}/chromium-1169/chrome-linux/chrome`,\n      `/tmp/playwright/chromium-1169/chrome-linux/chrome`,\n      // Playwright 경로 자동 감지 시도\n      process.env.PLAYWRIGHT_BROWSERS_PATH ? undefined : 'chromium'\n    ].filter(Boolean);\n    \n    console.log('Checking possible executable paths:');\n    for (const path of possiblePaths) {\n      try {\n        const fs = require('fs');\n        const exists = fs.existsSync(path);\n        console.log(`- ${path}: ${exists ? 'EXISTS' : 'NOT FOUND'}`);\n      } catch (e) {\n        console.log(`- ${path}: ERROR checking path`);\n      }\n    }\n    \n    // 첫 번째 경로로 시도\n    let browserLaunchError = null;\n  \n    // Chromium 브라우저 시작 (headless 모드)\n    try {\n      console.log('Trying to launch browser with primary path...');\n      browser = await chromium.launch({\n        headless: true,  // 백그라운드에서 실행\n        args: [\n          '--disable-web-security',\n          '--disable-features=IsolateOrigins,site-per-process',\n          '--no-sandbox',\n          '--disable-setuid-sandbox',\n          '--disable-dev-shm-usage'\n        ],\n        timeout: 60000, // 60초 타임아웃\n        // 실행 파일 경로는 우선 지정하지 않고 Playwright가 자동 감지하도록 함\n        executablePath: undefined\n      });\n      console.log('Browser launched successfully with primary path');\n    } catch (e) {\n      console.error('Failed to launch with default path:', e);\n      browserLaunchError = e;\n      \n      // 자동 감지 실패 시 다른 경로 시도\n      for (let i = 0; i < possiblePaths.length; i++) {\n        try {\n          if (!possiblePaths[i]) continue; // undefined 경로 건너뛰기\n          \n          console.log(`Trying alternate path: ${possiblePaths[i]}`);\n          browser = await chromium.launch({\n            headless: true,\n            args: [\n              '--no-sandbox', \n              '--disable-setuid-sandbox',\n              '--disable-dev-shm-usage'\n            ],\n            timeout: 60000,\n            executablePath: possiblePaths[i]\n          });\n          console.log(`Browser launched successfully with alternate path: ${possiblePaths[i]}`);\n          browserLaunchError = null;\n          break;\n        } catch (err) {\n          console.error(`Failed with alternate path ${possiblePaths[i]}:`, err);\n        }\n      }\n      \n      // 모든 경로 실패 시 브라우저 재설치 시도\n      if (browserLaunchError) {\n        console.log('모든 경로 시도 실패, 브라우저 재설치 시도 중...');\n        try {\n          // 브라우저 설치 시도\n          const { execSync } = require('child_process');\n          execSync('npx playwright install chromium', { stdio: 'inherit' });\n          console.log('Chromium 재설치 완료, 다시 시도합니다.');\n          \n          // 설치 후 브라우저 실행 재시도\n          browser = await chromium.launch({\n            headless: true,\n            args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage'],\n            timeout: 60000\n          });\n          console.log('브라우저 시작 성공 (재설치 후)');\n          browserLaunchError = null;\n        } catch (installError) {\n          console.error('브라우저 재설치 실패:', installError);\n          throw new Error(`모든 브라우저 실행 경로 시도 실패 및 재설치 실패: ${browserLaunchError instanceof Error ? browserLaunchError.message : String(browserLaunchError)}`);\n        }\n      }\n    }\n\n    // browser가 null인 경우 처리 (모든 실행 경로 시도 후에도 실패한 경우)\n    if (!browser) {\n      throw new Error('브라우저를 시작할 수 없습니다. 실행 파일 경로를 확인하세요.');\n    }\n    */ // puppeteer-core + @sparticuz/chromium 사용하여 브라우저 시작\n        console.log(\"Launching browser with @sparticuz/chromium...\");\n        // 환경에 맞는 Chromium 경로 가져오기\n        const executablePath = await getChromiumPath();\n        console.log(`Using Chromium at: ${executablePath}`);\n        // 브라우저 실행 옵션을 더 단순화\n        const options = {\n            args: [\n                \"--no-sandbox\",\n                \"--disable-setuid-sandbox\",\n                \"--disable-dev-shm-usage\",\n                \"--disable-gpu\"\n            ],\n            defaultViewport: {\n                width: 1280,\n                height: 800\n            },\n            executablePath,\n            headless: true,\n            ignoreHTTPSErrors: true,\n            timeout: 30000\n        };\n        // 브라우저 인스턴스\n        try {\n            // 브라우저 실행\n            console.log(\"Attempting to launch browser...\");\n            browser = await puppeteer.launch(options);\n            console.log(\"Browser launched successfully\");\n            // 페이지 생성 전에 잠시 대기하여 브라우저가 완전히 초기화되도록 함\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n            // 페이지 생성\n            console.log(\"Creating page...\");\n            const page = await browser.newPage();\n            console.log(\"Page created successfully\");\n            // 페이지 설정\n            await page.setDefaultNavigationTimeout(60000); // 60초\n            await page.setDefaultTimeout(60000);\n            // 사용자 에이전트 설정\n            await page.setUserAgent(\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\");\n            // 페이지 로드 전에 약간 대기\n            await new Promise((resolve)=>setTimeout(resolve, 500));\n            // 페이지 로드\n            console.log(`Loading URL: ${url}`);\n            await page.goto(url, {\n                waitUntil: \"networkidle0\",\n                timeout: 60000\n            });\n            console.log(\"Page loaded successfully\");\n            // 페이지 컨텐츠가 렌더링될 시간을 확보\n            console.log(\"Waiting for content to render...\");\n            await page.waitForTimeout(5000);\n            // 전체 페이지 HTML 가져오기\n            const rawHtml = await page.content();\n            console.log(`Raw HTML length: ${rawHtml.length} characters`);\n            // 페이지 텍스트 콘텐츠 가져오기\n            const rawText = await page.evaluate(()=>document.body.innerText);\n            console.log(`Raw text length: ${rawText.length} characters`);\n            // 대화 내용 추출 (메시지 구조화)\n            console.log(\"Extracting conversation data...\");\n            const conversationData = await extractConversationData(page);\n            // 대화 객체 생성\n            const conversation = {\n                id: extractConversationId(url),\n                title: conversationData.title,\n                messages: conversationData.messages,\n                createdAt: new Date().toISOString(),\n                source: _types__WEBPACK_IMPORTED_MODULE_2__.ChatSource.CHATGPT,\n                metadata: conversationData.metadata\n            };\n            // 빈 대화인지 확인\n            if (conversation.messages.length === 0) {\n                throw new Error(\"대화 내용을 추출할 수 없습니다.\");\n            }\n            console.log(`Extracted conversation: \"${conversation.title}\" with ${conversation.messages.length} messages`);\n            // 모든 작업이 완료된 후 브라우저 종료\n            console.log(\"Closing browser...\");\n            await browser.close();\n            console.log(\"Browser closed successfully\");\n            return {\n                conversation,\n                rawHtml,\n                rawText\n            };\n        } catch (error) {\n            console.error(\"Error during conversation extraction:\", error);\n            // 오류 발생 시 브라우저 자원 정리 시도\n            if (browser) {\n                try {\n                    await browser.close();\n                } catch (closeError) {\n                    console.warn(\"Failed to close browser after error:\", closeError);\n                }\n            }\n            throw error instanceof Error ? error : new Error(`대화 추출 중 오류 발생: ${String(error)}`);\n        }\n    } catch (error) {\n        console.error(\"Error during conversation extraction:\", error);\n        throw error instanceof Error ? error : new Error(`대화 추출 중 오류 발생: ${String(error)}`);\n    }\n}\n/**\n * URL에서 대화 ID를 추출하는 헬퍼 함수\n */ function extractConversationId(url) {\n    const urlSegments = url.split(\"/\");\n    const potentialId = urlSegments.pop() || \"\";\n    // ID가 유효한지 확인 (공유 URL의 ID 형식은 다를 수 있음)\n    if (potentialId && potentialId.length > 5) {\n        return potentialId;\n    }\n    // 대체 ID 생성\n    return `${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n}\n// Playwright Page 타입을 any로 변경\n// async function extractConversationData(page: Page): Promise<{\nasync function extractConversationData(page) {\n    return await page.evaluate(()=>{\n        console.log(\"Starting conversation extraction...\");\n        // 디버깅 정보\n        const pageInfo = {\n            url: window.location.href,\n            title: document.title,\n            bodyText: document.body.innerText.length\n        };\n        console.log(\"Page info:\", JSON.stringify(pageInfo));\n        // 제목 추출 (여러 방법 시도)\n        let title = \"\";\n        // 1. h1 태그에서 제목 찾기\n        const h1Element = document.querySelector(\"h1\");\n        if (h1Element && h1Element.textContent) {\n            title = h1Element.textContent.trim();\n        }\n        // 2. 페이지 타이틀에서 제목 찾기\n        if (!title) {\n            const titleElement = document.querySelector(\"title\");\n            if (titleElement && titleElement.textContent) {\n                title = titleElement.textContent.replace(\" - ChatGPT\", \"\").replace(\" - OpenAI\", \"\").trim();\n            }\n        }\n        // 3. 메타 데이터에서 제목 찾기\n        if (!title) {\n            const metaTitle = document.querySelector('meta[property=\"og:title\"]');\n            if (metaTitle) {\n                const content = metaTitle.getAttribute(\"content\");\n                if (content) {\n                    title = content.trim();\n                }\n            }\n        }\n        // 제목을 찾지 못한 경우 기본값 사용\n        if (!title) {\n            title = \"ChatGPT Conversation \" + new Date().toLocaleString();\n        }\n        console.log(`Title extracted: ${title}`);\n        // 페이지 전체에서 모든 대화 요소 직접 추출 시도\n        // 1. assistant 메시지 찾기 (여러 선택자 시도)\n        let assistantElements = document.querySelectorAll('[data-message-author-role=\"assistant\"]');\n        console.log(`[DEBUG] Found ${assistantElements.length} assistant elements by attribute`);\n        // 보조 선택자 시도\n        if (assistantElements.length === 0) {\n            const potentialSelectors = [\n                \".markdown.prose\",\n                '.chat-message[data-role=\"assistant\"]',\n                \".chat-message-assistant\",\n                \".assistant-message\",\n                '[data-role=\"assistant\"]',\n                'div[role=\"region\"] > div > div:nth-child(even)'\n            ];\n            for (const selector of potentialSelectors){\n                const elements = document.querySelectorAll(selector);\n                if (elements.length > 0) {\n                    console.log(`[DEBUG] Found ${elements.length} assistant elements with selector: ${selector}`);\n                    assistantElements = elements;\n                    break;\n                }\n            }\n        }\n        // 2. user 메시지 찾기 (여러 방법 시도)\n        // 명시적인 user 역할 속성 찾기\n        let userElements = Array.from(document.querySelectorAll('[data-message-author-role=\"user\"]'));\n        console.log(`[DEBUG] Found ${userElements.length} user elements by attribute`);\n        // 대안 선택자 시도\n        if (userElements.length === 0) {\n            const potentialUserSelectors = [\n                '.chat-message[data-role=\"user\"]',\n                \".chat-message-user\",\n                \".user-message\",\n                '[data-role=\"user\"]',\n                'div[role=\"region\"] > div > div:nth-child(odd)'\n            ];\n            for (const selector of potentialUserSelectors){\n                const elements = document.querySelectorAll(selector);\n                if (elements.length > 0) {\n                    console.log(`[DEBUG] Found ${elements.length} user elements with selector: ${selector}`);\n                    userElements = Array.from(elements);\n                    break;\n                }\n            }\n        }\n        console.log(`[DEBUG] Final count - Assistant: ${assistantElements.length}, User: ${userElements.length}`);\n        // 대화 수집\n        let messages = [];\n        if (assistantElements.length > 0 && userElements.length > 0) {\n            // HTML 구조에서 모든 대화 요소 수집 및 순서 결정\n            const conversationElements = [];\n            // 어시스턴트 메시지 추가\n            Array.from(assistantElements).forEach((el)=>{\n                conversationElements.push({\n                    element: el,\n                    role: \"assistant\",\n                    position: getPositionInDocument(el)\n                });\n            });\n            // 사용자 메시지 추가\n            userElements.forEach((el)=>{\n                conversationElements.push({\n                    element: el,\n                    role: \"user\",\n                    position: getPositionInDocument(el)\n                });\n            });\n            // DOM 순서대로 정렬\n            conversationElements.sort((a, b)=>a.position - b.position);\n            console.log(`[DEBUG] Sorted conversation elements: ${conversationElements.length}`);\n            console.log(`[DEBUG] First few roles: ${conversationElements.slice(0, 3).map((e)=>e.role).join(\", \")}`);\n            // 정렬된 요소에서 대화 내용 추출\n            const extractedMessages = [];\n            for (const item of conversationElements){\n                const content = item.element.textContent?.trim() || \"\";\n                if (content && content.length > 0) {\n                    // 일부 UI 요소 제외\n                    if (!content.includes(\"Skip to content\") && !content.includes(\"Log in\") && !content.includes(\"Sign up\")) {\n                        extractedMessages.push({\n                            role: item.role,\n                            content\n                        });\n                    }\n                }\n            }\n            console.log(`[DEBUG] Extracted ${extractedMessages.length} messages`);\n            if (extractedMessages.length > 0) {\n                console.log(`[DEBUG] First message role: ${extractedMessages[0].role}`);\n                console.log(`[DEBUG] First message preview: ${extractedMessages[0].content.substring(0, 30)}...`);\n            }\n            // 최소한 하나의 사용자와 어시스턴트 메시지가 있는지 확인\n            const hasUser = extractedMessages.some((m)=>m.role === \"user\");\n            const hasAssistant = extractedMessages.some((m)=>m.role === \"assistant\");\n            if (hasUser && hasAssistant && extractedMessages.length >= 2) {\n                console.log(`[DEBUG] Found valid conversation with ${extractedMessages.length} messages`);\n                messages = extractedMessages;\n            } else {\n                console.log(`[DEBUG] Extracted messages don't form a valid conversation (user: ${hasUser}, assistant: ${hasAssistant})`);\n            }\n        }\n        // 페이지에서 요소의 위치를 결정하는 함수\n        function getPositionInDocument(element) {\n            // 요소의 부모들을 모두 찾아서 깊이 계산\n            let depth = 0;\n            let parent = element.parentElement;\n            while(parent){\n                depth++;\n                parent = parent.parentElement;\n            }\n            // DOM에서의 순서를 계산 (형제 요소 중 위치)\n            let siblingPosition = 0;\n            let sibling = element.previousElementSibling;\n            while(sibling){\n                siblingPosition++;\n                sibling = sibling.previousElementSibling;\n            }\n            // 요소의 대략적인 Y 위치를 반환 (if available)\n            const rect = element.getBoundingClientRect();\n            const yPosition = rect ? rect.top : 0;\n            // 깊이, 형제 위치, Y위치를 조합하여 최종 위치 반환\n            return yPosition + siblingPosition * 10000 + depth * 1000000;\n        }\n        // 메시지가 없으면 기본 오류 메시지 추가\n        if (messages.length === 0) {\n            // 최후의 방법: 페이지에서 이전/다음 메시지 패턴 찾기\n            try {\n                // 일반적인 사용자 입력 패턴 (최소 3개 이상의 단어를 가진 문단)\n                const potentialUserMessages = Array.from(document.querySelectorAll(\"p, div, span\")).map((el)=>el.textContent?.trim() || \"\").filter((text)=>text && text.split(\" \").length >= 3 && text.length > 20).filter((text)=>!text.includes(\"ChatGPT\") && !text.includes(\"Log in\") && !text.includes(\"Sign up\"));\n                if (potentialUserMessages.length > 0) {\n                    // 첫 번째 메시지를 사용자 메시지로 추가\n                    const userMessage = potentialUserMessages[0];\n                    messages.push({\n                        role: \"user\",\n                        content: userMessage\n                    });\n                    // 나머지 텍스트를 어시스턴트 응답으로 추가\n                    const remainingText = document.body.innerText.replace(title, \"\").replace(userMessage, \"\").replace(/Log in|Sign up|Attach|Search|Reason|Voice|By messaging ChatGPT|Skip to content|ChatGPT/g, \"\").replace(/window\\.__oai_.*?;/g, \"\").trim();\n                    if (remainingText.length > 0) {\n                        messages.push({\n                            role: \"assistant\",\n                            content: remainingText\n                        });\n                    }\n                } else {\n                    messages.push({\n                        role: \"assistant\",\n                        content: \"대화 내용을 추출할 수 없습니다. ChatGPT 공유 링크가 유효한지 확인해주세요.\"\n                    });\n                }\n            } catch (error) {\n                messages.push({\n                    role: \"assistant\",\n                    content: \"대화 내용을 추출할 수 없습니다. ChatGPT 공유 링크가 유효한지 확인해주세요.\"\n                });\n            }\n        }\n        // 대화형 구조 확인 - 먼저 유저 메시지로 시작하는지 확인\n        if (messages.length > 0 && messages[0].role !== \"user\") {\n            // ChatGPT 대화는 항상 사용자 질문으로 시작해야 함\n            // 대화가 어시스턴트로 시작하면 첫 메시지를 사용자 메시지로 변경\n            console.log(\"첫 메시지가 사용자 메시지가 아닙니다. 대화 구조를 수정합니다.\");\n            // 새 대화 구조 생성\n            const alternatingMessages = [];\n            // 첫 번째 메시지가 assistant인 경우, 가짜 user 메시지를 추가하고 시작\n            alternatingMessages.push({\n                role: \"user\",\n                content: \"대화를 시작합니다.\"\n            });\n            // 기존 메시지 복사\n            messages.forEach((msg)=>{\n                alternatingMessages.push(msg);\n            });\n            // 수정된 메시지로 교체\n            messages = alternatingMessages;\n        }\n        // 올바른 대화 구조 확인 (user와 assistant가 번갈아 나타나야 함)\n        const correctedMessages = [];\n        let expectedRole = \"user\"; // 대화는 user로 시작해야 함\n        messages.forEach((msg, index)=>{\n            if (index === 0 && msg.role !== \"user\") {\n                // 첫 메시지는 항상 사용자여야 함\n                correctedMessages.push({\n                    role: \"user\",\n                    content: \"대화를 시작합니다.\"\n                });\n                expectedRole = \"assistant\";\n            }\n            if (msg.role === expectedRole) {\n                // 역할이 예상대로인 경우 그대로 추가\n                correctedMessages.push(msg);\n                // 다음 예상 역할 전환\n                expectedRole = expectedRole === \"user\" ? \"assistant\" : \"user\";\n            } else {\n                // 같은 역할이 연속으로 나타나는 경우, 빈 메시지를 중간에 삽입\n                if (expectedRole === \"user\") {\n                    correctedMessages.push({\n                        role: \"user\",\n                        content: \"(계속)\"\n                    });\n                } else {\n                    correctedMessages.push({\n                        role: \"assistant\",\n                        content: \"(계속)\"\n                    });\n                }\n                // 현재 메시지 추가\n                correctedMessages.push(msg);\n                // 다음 예상 역할 설정\n                expectedRole = msg.role === \"user\" ? \"assistant\" : \"user\";\n            }\n        });\n        // 수정된 메시지로 교체\n        messages = correctedMessages;\n        // GPT-4 모델인지 확인\n        const isGPT4 = document.body.innerText.includes(\"GPT-4\") || document.body.innerText.includes(\"gpt-4\") || document.querySelector('img[alt*=\"GPT-4\"]') !== null;\n        return {\n            title,\n            messages,\n            metadata: {\n                date: new Date().toISOString(),\n                model: isGPT4 ? \"gpt-4\" : \"gpt-3.5-turbo\",\n                tags: []\n            }\n        };\n    });\n}\n\n(0,private_next_rsc_action_validate__WEBPACK_IMPORTED_MODULE_5__.ensureServerEntryExports)([\n    parseChatGPTLink\n]);\n(0,private_next_rsc_action_proxy__WEBPACK_IMPORTED_MODULE_0__.createActionProxy)(\"491c471e7f9b8d25a45396e01470b054e19a90ee\", parseChatGPTLink);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/utils/chatgpt.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/utils/openai.ts":
/*!*********************************!*\
  !*** ./src/lib/utils/openai.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   summarizeConversation: () => (/* binding */ summarizeConversation),\n/* harmony export */   summarizeLongConversation: () => (/* binding */ summarizeLongConversation)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\n// OpenAI API 클라이언트 초기화\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n// 사용할 모델 정의\nconst MODEL = \"gpt-4.1-nano\";\n/**\r\n * 대화 내용을 요약하고 키워드를 추출하는 함수\r\n * @param title 대화 제목\r\n * @param messages 대화 메시지 배열\r\n * @returns 요약된 내용과 키워드, 사용된 모델 정보\r\n */ async function summarizeConversation(title, messages) {\n    try {\n        const conversationText = messages.map((msg)=>`${msg.role === \"user\" ? \"\\uD83D\\uDC64 사용자\" : \"\\uD83E\\uDD16 AI\"}: ${msg.content}`).join(\"\\n\\n\");\n        // API 요청 - 요약 및 키워드 추출\n        const response = await openai.chat.completions.create({\n            model: MODEL,\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"당신은 대화 내용을 요약하고 주요 키워드를 추출하는 assistant입니다. 요약은 3-5문장으로, 키워드는 최대 5개까지 추출해주세요. JSON 형식으로 응답해주세요.\"\n                },\n                {\n                    role: \"user\",\n                    content: `제목: \"${title}\"\\n\\n다음 대화 내용을 요약하고, 관련 키워드를 추출해주세요. JSON 형식으로 응답해야 합니다. 다음 형식으로 응답하세요: {\"summary\": \"요약 내용...\", \"keywords\": [\"키워드1\", \"키워드2\", ...]}:\\n\\n${conversationText}`\n                }\n            ],\n            temperature: 0.5,\n            max_tokens: 400,\n            response_format: {\n                type: \"json_object\"\n            }\n        });\n        // 응답 처리\n        try {\n            const content = response.choices[0]?.message?.content || \"\";\n            console.log(\"API 응답 내용:\", content);\n            const parsedContent = JSON.parse(content);\n            return {\n                summary: parsedContent.summary || \"요약을 생성할 수 없습니다.\",\n                keywords: Array.isArray(parsedContent.keywords) ? parsedContent.keywords : [],\n                modelUsed: MODEL\n            };\n        } catch (parseError) {\n            console.error(\"JSON 파싱 오류:\", parseError);\n            console.log(\"파싱 실패한 내용:\", response.choices[0]?.message?.content);\n            return {\n                summary: \"요약을 생성할 수 없습니다.\",\n                keywords: [],\n                modelUsed: MODEL\n            };\n        }\n    } catch (error) {\n        console.error(\"대화 요약 중 오류 발생:\", error);\n        return {\n            summary: \"요약을 생성할 수 없습니다.\",\n            keywords: [],\n            modelUsed: MODEL\n        };\n    }\n}\n/**\r\n * 긴 대화를 요약하는 함수 (토큰 제한에 걸리는 경우 사용)\r\n * @param title 대화 제목\r\n * @param messages 대화 메시지 배열\r\n * @returns 요약된 내용과 키워드, 사용된 모델 정보\r\n */ async function summarizeLongConversation(title, messages) {\n    try {\n        // 대화를 여러 파트로 나누기 (10개 메시지씩)\n        const messageParts = [];\n        const partSize = 10;\n        for(let i = 0; i < messages.length; i += partSize){\n            messageParts.push(messages.slice(i, i + partSize));\n        }\n        // 각 파트별로 요약 생성\n        const partSummaries = [];\n        let allKeywords = [];\n        for(let i = 0; i < messageParts.length; i++){\n            try {\n                const result = await summarizeConversation(`${title} (파트 ${i + 1}/${messageParts.length})`, messageParts[i]);\n                partSummaries.push(`파트 ${i + 1}: ${result.summary}`);\n                // 키워드 수집\n                if (Array.isArray(result.keywords)) {\n                    allKeywords = [\n                        ...allKeywords,\n                        ...result.keywords\n                    ];\n                }\n            } catch (error) {\n                console.error(`파트 ${i + 1} 요약 중 오류:`, error);\n                partSummaries.push(`파트 ${i + 1}: 요약 실패`);\n            }\n        }\n        // 부분 요약들을 조합하여 최종 요약 생성\n        const finalResponse = await openai.chat.completions.create({\n            model: MODEL,\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"여러 대화 요약을 하나의 통합된 요약으로 만들고, 가장 중요한 키워드를 5개 이내로 추출해주세요. JSON 형식으로 응답해주세요.\"\n                },\n                {\n                    role: \"user\",\n                    content: `다음은 긴 대화를 나눈 부분별 요약입니다. 이들을 결합하여 전체 대화의 핵심을 담은 통합 요약을 5문장 이내로 작성하고, 가장 중요한 키워드 5개를 추출해주세요. JSON 형식으로 응답해야 합니다. {\"summary\": \"요약 내용...\", \"keywords\": [\"키워드1\", \"키워드2\", ...]} 형식으로 응답하세요:\\n\\n${partSummaries.join(\"\\n\\n\")}`\n                }\n            ],\n            temperature: 0.5,\n            max_tokens: 400,\n            response_format: {\n                type: \"json_object\"\n            }\n        });\n        try {\n            const content = finalResponse.choices[0]?.message?.content || \"\";\n            console.log(\"최종 API 응답 내용:\", content);\n            const parsedContent = JSON.parse(content);\n            return {\n                summary: parsedContent.summary || \"요약을 생성할 수 없습니다.\",\n                keywords: Array.isArray(parsedContent.keywords) ? parsedContent.keywords : allKeywords,\n                modelUsed: MODEL\n            };\n        } catch (parseError) {\n            console.error(\"최종 요약 JSON 파싱 오류:\", parseError);\n            console.log(\"파싱 실패한 내용:\", finalResponse.choices[0]?.message?.content);\n            // 키워드 중복 제거 및 최대 5개로 제한\n            const uniqueKeywords = Array.from(new Set(allKeywords)).slice(0, 5);\n            return {\n                summary: \"요약을 생성할 수 없습니다.\",\n                keywords: uniqueKeywords,\n                modelUsed: MODEL\n            };\n        }\n    } catch (error) {\n        console.error(\"긴 대화 요약 중 오류 발생:\", error);\n        return {\n            summary: \"요약을 생성할 수 없습니다.\",\n            keywords: [],\n            modelUsed: MODEL\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3V0aWxzL29wZW5haS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEI7QUFHNUIsdUJBQXVCO0FBQ3ZCLE1BQU1DLFNBQVMsSUFBSUQsOENBQU1BLENBQUM7SUFDeEJFLFFBQVFDLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYztBQUNwQztBQUVBLFlBQVk7QUFDWixNQUFNQyxRQUFRO0FBU2Q7Ozs7O0NBS0MsR0FDTSxlQUFlQyxzQkFDcEJDLEtBQWEsRUFDYkMsUUFBdUI7SUFFdkIsSUFBSTtRQUNGLE1BQU1DLG1CQUFtQkQsU0FDdEJFLEdBQUcsQ0FBQ0MsQ0FBQUEsTUFBTyxDQUFDLEVBQUVBLElBQUlDLElBQUksS0FBSyxTQUFTLHFCQUFXLGtCQUFRLEVBQUUsRUFBRUQsSUFBSUUsT0FBTyxDQUFDLENBQUMsRUFDeEVDLElBQUksQ0FBQztRQUVSLHVCQUF1QjtRQUN2QixNQUFNQyxXQUFXLE1BQU1mLE9BQU9nQixJQUFJLENBQUNDLFdBQVcsQ0FBQ0MsTUFBTSxDQUFDO1lBQ3BEQyxPQUFPZDtZQUNQRyxVQUFVO2dCQUNSO29CQUNFSSxNQUFNO29CQUNOQyxTQUFTO2dCQUNYO2dCQUNBO29CQUNFRCxNQUFNO29CQUNOQyxTQUFTLENBQUMsS0FBSyxFQUFFTixNQUFNLHVJQUF1SSxFQUFFRSxpQkFBaUIsQ0FBQztnQkFDcEw7YUFDRDtZQUNEVyxhQUFhO1lBQ2JDLFlBQVk7WUFDWkMsaUJBQWlCO2dCQUFFQyxNQUFNO1lBQWM7UUFDekM7UUFFQSxRQUFRO1FBQ1IsSUFBSTtZQUNGLE1BQU1WLFVBQVVFLFNBQVNTLE9BQU8sQ0FBQyxFQUFFLEVBQUVDLFNBQVNaLFdBQVc7WUFDekRhLFFBQVFDLEdBQUcsQ0FBQyxjQUFjZDtZQUUxQixNQUFNZSxnQkFBZ0JDLEtBQUtDLEtBQUssQ0FBQ2pCO1lBQ2pDLE9BQU87Z0JBQ0xrQixTQUFTSCxjQUFjRyxPQUFPLElBQUk7Z0JBQ2xDQyxVQUFVQyxNQUFNQyxPQUFPLENBQUNOLGNBQWNJLFFBQVEsSUFBSUosY0FBY0ksUUFBUSxHQUFHLEVBQUU7Z0JBQzdFRyxXQUFXOUI7WUFDYjtRQUNGLEVBQUUsT0FBTytCLFlBQVk7WUFDbkJWLFFBQVFXLEtBQUssQ0FBQyxlQUFlRDtZQUM3QlYsUUFBUUMsR0FBRyxDQUFDLGNBQWNaLFNBQVNTLE9BQU8sQ0FBQyxFQUFFLEVBQUVDLFNBQVNaO1lBQ3hELE9BQU87Z0JBQ0xrQixTQUFTO2dCQUNUQyxVQUFVLEVBQUU7Z0JBQ1pHLFdBQVc5QjtZQUNiO1FBQ0Y7SUFDRixFQUFFLE9BQU9nQyxPQUFZO1FBQ25CWCxRQUFRVyxLQUFLLENBQUMsa0JBQWtCQTtRQUNoQyxPQUFPO1lBQ0xOLFNBQVM7WUFDVEMsVUFBVSxFQUFFO1lBQ1pHLFdBQVc5QjtRQUNiO0lBQ0Y7QUFDRjtBQUVBOzs7OztDQUtDLEdBQ00sZUFBZWlDLDBCQUNwQi9CLEtBQWEsRUFDYkMsUUFBdUI7SUFFdkIsSUFBSTtRQUNGLDRCQUE0QjtRQUM1QixNQUFNK0IsZUFBZ0MsRUFBRTtRQUN4QyxNQUFNQyxXQUFXO1FBRWpCLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJakMsU0FBU2tDLE1BQU0sRUFBRUQsS0FBS0QsU0FBVTtZQUNsREQsYUFBYUksSUFBSSxDQUFDbkMsU0FBU29DLEtBQUssQ0FBQ0gsR0FBR0EsSUFBSUQ7UUFDMUM7UUFFQSxlQUFlO1FBQ2YsTUFBTUssZ0JBQTBCLEVBQUU7UUFDbEMsSUFBSUMsY0FBd0IsRUFBRTtRQUU5QixJQUFLLElBQUlMLElBQUksR0FBR0EsSUFBSUYsYUFBYUcsTUFBTSxFQUFFRCxJQUFLO1lBQzVDLElBQUk7Z0JBQ0YsTUFBTU0sU0FBUyxNQUFNekMsc0JBQ25CLENBQUMsRUFBRUMsTUFBTSxLQUFLLEVBQUVrQyxJQUFFLEVBQUUsQ0FBQyxFQUFFRixhQUFhRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQzdDSCxZQUFZLENBQUNFLEVBQUU7Z0JBRWpCSSxjQUFjRixJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUVGLElBQUUsRUFBRSxFQUFFLEVBQUVNLE9BQU9oQixPQUFPLENBQUMsQ0FBQztnQkFFakQsU0FBUztnQkFDVCxJQUFJRSxNQUFNQyxPQUFPLENBQUNhLE9BQU9mLFFBQVEsR0FBRztvQkFDbENjLGNBQWM7MkJBQUlBOzJCQUFnQkMsT0FBT2YsUUFBUTtxQkFBQztnQkFDcEQ7WUFDRixFQUFFLE9BQU9LLE9BQU87Z0JBQ2RYLFFBQVFXLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRUksSUFBRSxFQUFFLFNBQVMsQ0FBQyxFQUFFSjtnQkFDcENRLGNBQWNGLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRUYsSUFBRSxFQUFFLE9BQU8sQ0FBQztZQUN2QztRQUNGO1FBRUEsd0JBQXdCO1FBQ3hCLE1BQU1PLGdCQUFnQixNQUFNaEQsT0FBT2dCLElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxNQUFNLENBQUM7WUFDekRDLE9BQU9kO1lBQ1BHLFVBQVU7Z0JBQ1I7b0JBQ0VJLE1BQU07b0JBQ05DLFNBQVM7Z0JBQ1g7Z0JBQ0E7b0JBQ0VELE1BQU07b0JBQ05DLFNBQVMsQ0FBQyx5TEFBeUwsRUFBRWdDLGNBQWMvQixJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUNuTzthQUNEO1lBQ0RNLGFBQWE7WUFDYkMsWUFBWTtZQUNaQyxpQkFBaUI7Z0JBQUVDLE1BQU07WUFBYztRQUN6QztRQUVBLElBQUk7WUFDRixNQUFNVixVQUFVbUMsY0FBY3hCLE9BQU8sQ0FBQyxFQUFFLEVBQUVDLFNBQVNaLFdBQVc7WUFDOURhLFFBQVFDLEdBQUcsQ0FBQyxpQkFBaUJkO1lBRTdCLE1BQU1lLGdCQUFnQkMsS0FBS0MsS0FBSyxDQUFDakI7WUFDakMsT0FBTztnQkFDTGtCLFNBQVNILGNBQWNHLE9BQU8sSUFBSTtnQkFDbENDLFVBQVVDLE1BQU1DLE9BQU8sQ0FBQ04sY0FBY0ksUUFBUSxJQUFJSixjQUFjSSxRQUFRLEdBQUdjO2dCQUMzRVgsV0FBVzlCO1lBQ2I7UUFDRixFQUFFLE9BQU8rQixZQUFZO1lBQ25CVixRQUFRVyxLQUFLLENBQUMscUJBQXFCRDtZQUNuQ1YsUUFBUUMsR0FBRyxDQUFDLGNBQWNxQixjQUFjeEIsT0FBTyxDQUFDLEVBQUUsRUFBRUMsU0FBU1o7WUFFN0Qsd0JBQXdCO1lBQ3hCLE1BQU1vQyxpQkFBaUJoQixNQUFNaUIsSUFBSSxDQUFDLElBQUlDLElBQUlMLGNBQWNGLEtBQUssQ0FBQyxHQUFHO1lBRWpFLE9BQU87Z0JBQ0xiLFNBQVM7Z0JBQ1RDLFVBQVVpQjtnQkFDVmQsV0FBVzlCO1lBQ2I7UUFDRjtJQUNGLEVBQUUsT0FBT2dDLE9BQVk7UUFDbkJYLFFBQVFXLEtBQUssQ0FBQyxvQkFBb0JBO1FBQ2xDLE9BQU87WUFDTE4sU0FBUztZQUNUQyxVQUFVLEVBQUU7WUFDWkcsV0FBVzlCO1FBQ2I7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGttLXByb2plY3QvLi9zcmMvbGliL3V0aWxzL29wZW5haS50cz9iNjgxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPcGVuQUkgZnJvbSAnb3BlbmFpJztcclxuaW1wb3J0IHsgQ2hhdE1lc3NhZ2UgfSBmcm9tICdAL3R5cGVzJztcclxuXHJcbi8vIE9wZW5BSSBBUEkg7YG065287J207Ja47Yq4IOy0iOq4sO2ZlFxyXG5jb25zdCBvcGVuYWkgPSBuZXcgT3BlbkFJKHtcclxuICBhcGlLZXk6IHByb2Nlc3MuZW52Lk9QRU5BSV9BUElfS0VZLFxyXG59KTtcclxuXHJcbi8vIOyCrOyaqe2VoCDrqqjrjbgg7KCV7J2YXHJcbmNvbnN0IE1PREVMID0gJ2dwdC00LjEtbmFubyc7XHJcblxyXG4vLyDsmpTslb0g6rKw6rO8IO2DgOyehSDsoJXsnZhcclxuZXhwb3J0IGludGVyZmFjZSBTdW1tYXJ5UmVzdWx0IHtcclxuICBzdW1tYXJ5OiBzdHJpbmc7XHJcbiAga2V5d29yZHM6IHN0cmluZ1tdO1xyXG4gIG1vZGVsVXNlZDogc3RyaW5nO1xyXG59XHJcblxyXG4vKipcclxuICog64yA7ZmUIOuCtOyaqeydhCDsmpTslb3tlZjqs6Ag7YKk7JuM65Oc66W8IOy2lOy2nO2VmOuKlCDtlajsiJhcclxuICogQHBhcmFtIHRpdGxlIOuMgO2ZlCDsoJzrqqlcclxuICogQHBhcmFtIG1lc3NhZ2VzIOuMgO2ZlCDrqZTsi5zsp4Ag67Cw7Je0XHJcbiAqIEByZXR1cm5zIOyalOyVveuQnCDrgrTsmqnqs7wg7YKk7JuM65OcLCDsgqzsmqnrkJwg66qo6424IOygleuztFxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN1bW1hcml6ZUNvbnZlcnNhdGlvbihcclxuICB0aXRsZTogc3RyaW5nLFxyXG4gIG1lc3NhZ2VzOiBDaGF0TWVzc2FnZVtdXHJcbik6IFByb21pc2U8U3VtbWFyeVJlc3VsdD4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBjb252ZXJzYXRpb25UZXh0ID0gbWVzc2FnZXNcclxuICAgICAgLm1hcChtc2cgPT4gYCR7bXNnLnJvbGUgPT09ICd1c2VyJyA/ICfwn5GkIOyCrOyaqeyekCcgOiAn8J+kliBBSSd9OiAke21zZy5jb250ZW50fWApXHJcbiAgICAgIC5qb2luKCdcXG5cXG4nKTtcclxuXHJcbiAgICAvLyBBUEkg7JqU7LKtIC0g7JqU7JW9IOuwjyDtgqTsm4zrk5wg7LaU7LacXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IG9wZW5haS5jaGF0LmNvbXBsZXRpb25zLmNyZWF0ZSh7XHJcbiAgICAgIG1vZGVsOiBNT0RFTCxcclxuICAgICAgbWVzc2FnZXM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICByb2xlOiAnc3lzdGVtJyxcclxuICAgICAgICAgIGNvbnRlbnQ6ICfri7nsi6DsnYAg64yA7ZmUIOuCtOyaqeydhCDsmpTslb3tlZjqs6Ag7KO87JqUIO2CpOybjOuTnOulvCDstpTstpztlZjripQgYXNzaXN0YW507J6F64uI64ukLiDsmpTslb3snYAgMy0166y47J6l7Jy866GcLCDtgqTsm4zrk5zripQg7LWc64yAIDXqsJzquYzsp4Ag7LaU7Lac7ZW07KO87IS47JqULiBKU09OIO2YleyLneycvOuhnCDsnZHri7XtlbTso7zshLjsmpQuJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcm9sZTogJ3VzZXInLFxyXG4gICAgICAgICAgY29udGVudDogYOygnOuqqTogXCIke3RpdGxlfVwiXFxuXFxu64uk7J2MIOuMgO2ZlCDrgrTsmqnsnYQg7JqU7JW97ZWY6rOgLCDqtIDroKgg7YKk7JuM65Oc66W8IOy2lOy2nO2VtOyjvOyEuOyalC4gSlNPTiDtmJXsi53snLzroZwg7J2R64u17ZW07JW8IO2VqeuLiOuLpC4g64uk7J2MIO2YleyLneycvOuhnCDsnZHri7XtlZjshLjsmpQ6IHtcInN1bW1hcnlcIjogXCLsmpTslb0g64K07JqpLi4uXCIsIFwia2V5d29yZHNcIjogW1wi7YKk7JuM65OcMVwiLCBcIu2CpOybjOuTnDJcIiwgLi4uXX06XFxuXFxuJHtjb252ZXJzYXRpb25UZXh0fWBcclxuICAgICAgICB9XHJcbiAgICAgIF0sXHJcbiAgICAgIHRlbXBlcmF0dXJlOiAwLjUsXHJcbiAgICAgIG1heF90b2tlbnM6IDQwMCxcclxuICAgICAgcmVzcG9uc2VfZm9ybWF0OiB7IHR5cGU6IFwianNvbl9vYmplY3RcIiB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyDsnZHri7Ug7LKY66asXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBjb250ZW50ID0gcmVzcG9uc2UuY2hvaWNlc1swXT8ubWVzc2FnZT8uY29udGVudCB8fCAnJztcclxuICAgICAgY29uc29sZS5sb2coJ0FQSSDsnZHri7Ug64K07JqpOicsIGNvbnRlbnQpO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgcGFyc2VkQ29udGVudCA9IEpTT04ucGFyc2UoY29udGVudCk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VtbWFyeTogcGFyc2VkQ29udGVudC5zdW1tYXJ5IHx8ICfsmpTslb3snYQg7IOd7ISx7ZWgIOyImCDsl4bsirXri4jri6QuJyxcclxuICAgICAgICBrZXl3b3JkczogQXJyYXkuaXNBcnJheShwYXJzZWRDb250ZW50LmtleXdvcmRzKSA/IHBhcnNlZENvbnRlbnQua2V5d29yZHMgOiBbXSxcclxuICAgICAgICBtb2RlbFVzZWQ6IE1PREVMXHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0pTT04g7YyM7IuxIOyYpOulmDonLCBwYXJzZUVycm9yKTtcclxuICAgICAgY29uc29sZS5sb2coJ+2MjOyLsSDsi6TtjKjtlZwg64K07JqpOicsIHJlc3BvbnNlLmNob2ljZXNbMF0/Lm1lc3NhZ2U/LmNvbnRlbnQpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN1bW1hcnk6ICfsmpTslb3snYQg7IOd7ISx7ZWgIOyImCDsl4bsirXri4jri6QuJyxcclxuICAgICAgICBrZXl3b3JkczogW10sXHJcbiAgICAgICAgbW9kZWxVc2VkOiBNT0RFTFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ+uMgO2ZlCDsmpTslb0g7KSRIOyYpOulmCDrsJzsg506JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3VtbWFyeTogJ+yalOyVveydhCDsg53shLHtlaAg7IiYIOyXhuyKteuLiOuLpC4nLFxyXG4gICAgICBrZXl3b3JkczogW10sXHJcbiAgICAgIG1vZGVsVXNlZDogTU9ERUxcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICog6ri0IOuMgO2ZlOulvCDsmpTslb3tlZjripQg7ZWo7IiYICjthqDtgbAg7KCc7ZWc7JeQIOqxuOumrOuKlCDqsr3smrAg7IKs7JqpKVxyXG4gKiBAcGFyYW0gdGl0bGUg64yA7ZmUIOygnOuqqVxyXG4gKiBAcGFyYW0gbWVzc2FnZXMg64yA7ZmUIOuplOyLnOyngCDrsLDsl7RcclxuICogQHJldHVybnMg7JqU7JW965CcIOuCtOyaqeqzvCDtgqTsm4zrk5wsIOyCrOyaqeuQnCDrqqjrjbgg7KCV67O0XHJcbiAqL1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3VtbWFyaXplTG9uZ0NvbnZlcnNhdGlvbihcclxuICB0aXRsZTogc3RyaW5nLFxyXG4gIG1lc3NhZ2VzOiBDaGF0TWVzc2FnZVtdXHJcbik6IFByb21pc2U8U3VtbWFyeVJlc3VsdD4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyDrjIDtmZTrpbwg7Jes65+sIO2MjO2KuOuhnCDrgpjriITquLAgKDEw6rCcIOuplOyLnOyngOyUqSlcclxuICAgIGNvbnN0IG1lc3NhZ2VQYXJ0czogQ2hhdE1lc3NhZ2VbXVtdID0gW107XHJcbiAgICBjb25zdCBwYXJ0U2l6ZSA9IDEwO1xyXG4gICAgXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2VzLmxlbmd0aDsgaSArPSBwYXJ0U2l6ZSkge1xyXG4gICAgICBtZXNzYWdlUGFydHMucHVzaChtZXNzYWdlcy5zbGljZShpLCBpICsgcGFydFNpemUpKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgLy8g6rCBIO2MjO2KuOuzhOuhnCDsmpTslb0g7IOd7ISxXHJcbiAgICBjb25zdCBwYXJ0U3VtbWFyaWVzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgbGV0IGFsbEtleXdvcmRzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc3NhZ2VQYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN1bW1hcml6ZUNvbnZlcnNhdGlvbihcclxuICAgICAgICAgIGAke3RpdGxlfSAo7YyM7Yq4ICR7aSsxfS8ke21lc3NhZ2VQYXJ0cy5sZW5ndGh9KWAsXHJcbiAgICAgICAgICBtZXNzYWdlUGFydHNbaV1cclxuICAgICAgICApO1xyXG4gICAgICAgIHBhcnRTdW1tYXJpZXMucHVzaChg7YyM7Yq4ICR7aSsxfTogJHtyZXN1bHQuc3VtbWFyeX1gKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDtgqTsm4zrk5wg7IiY7KeRXHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0LmtleXdvcmRzKSkge1xyXG4gICAgICAgICAgYWxsS2V5d29yZHMgPSBbLi4uYWxsS2V5d29yZHMsIC4uLnJlc3VsdC5rZXl3b3Jkc107XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYO2MjO2KuCAke2krMX0g7JqU7JW9IOykkSDsmKTrpZg6YCwgZXJyb3IpO1xyXG4gICAgICAgIHBhcnRTdW1tYXJpZXMucHVzaChg7YyM7Yq4ICR7aSsxfTog7JqU7JW9IOyLpO2MqGApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIOu2gOu2hCDsmpTslb3rk6TsnYQg7KGw7ZWp7ZWY7JesIOy1nOyihSDsmpTslb0g7IOd7ISxXHJcbiAgICBjb25zdCBmaW5hbFJlc3BvbnNlID0gYXdhaXQgb3BlbmFpLmNoYXQuY29tcGxldGlvbnMuY3JlYXRlKHtcclxuICAgICAgbW9kZWw6IE1PREVMLFxyXG4gICAgICBtZXNzYWdlczogW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgIHJvbGU6ICdzeXN0ZW0nLFxyXG4gICAgICAgICAgY29udGVudDogJ+yXrOufrCDrjIDtmZQg7JqU7JW97J2EIO2VmOuCmOydmCDthrXtlanrkJwg7JqU7JW97Jy866GcIOunjOuTpOqzoCwg6rCA7J6lIOykkeyalO2VnCDtgqTsm4zrk5zrpbwgNeqwnCDsnbTrgrTroZwg7LaU7Lac7ZW07KO87IS47JqULiBKU09OIO2YleyLneycvOuhnCDsnZHri7XtlbTso7zshLjsmpQuJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcm9sZTogJ3VzZXInLFxyXG4gICAgICAgICAgY29udGVudDogYOuLpOydjOydgCDquLQg64yA7ZmU66W8IOuCmOuIiCDrtoDrtoTrs4Qg7JqU7JW97J6F64uI64ukLiDsnbTrk6TsnYQg6rKw7ZWp7ZWY7JesIOyghOyytCDrjIDtmZTsnZgg7ZW17Ius7J2EIOuLtOydgCDthrXtlakg7JqU7JW97J2EIDXrrLjsnqUg7J2064K066GcIOyekeyEse2VmOqzoCwg6rCA7J6lIOykkeyalO2VnCDtgqTsm4zrk5wgNeqwnOulvCDstpTstpztlbTso7zshLjsmpQuIEpTT04g7ZiV7Iud7Jy866GcIOydkeuLte2VtOyVvCDtlanri4jri6QuIHtcInN1bW1hcnlcIjogXCLsmpTslb0g64K07JqpLi4uXCIsIFwia2V5d29yZHNcIjogW1wi7YKk7JuM65OcMVwiLCBcIu2CpOybjOuTnDJcIiwgLi4uXX0g7ZiV7Iud7Jy866GcIOydkeuLte2VmOyEuOyalDpcXG5cXG4ke3BhcnRTdW1tYXJpZXMuam9pbignXFxuXFxuJyl9YFxyXG4gICAgICAgIH1cclxuICAgICAgXSxcclxuICAgICAgdGVtcGVyYXR1cmU6IDAuNSxcclxuICAgICAgbWF4X3Rva2VuczogNDAwLFxyXG4gICAgICByZXNwb25zZV9mb3JtYXQ6IHsgdHlwZTogXCJqc29uX29iamVjdFwiIH1cclxuICAgIH0pO1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBjb250ZW50ID0gZmluYWxSZXNwb25zZS5jaG9pY2VzWzBdPy5tZXNzYWdlPy5jb250ZW50IHx8ICcnO1xyXG4gICAgICBjb25zb2xlLmxvZygn7LWc7KKFIEFQSSDsnZHri7Ug64K07JqpOicsIGNvbnRlbnQpO1xyXG4gICAgICBcclxuICAgICAgY29uc3QgcGFyc2VkQ29udGVudCA9IEpTT04ucGFyc2UoY29udGVudCk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VtbWFyeTogcGFyc2VkQ29udGVudC5zdW1tYXJ5IHx8ICfsmpTslb3snYQg7IOd7ISx7ZWgIOyImCDsl4bsirXri4jri6QuJyxcclxuICAgICAgICBrZXl3b3JkczogQXJyYXkuaXNBcnJheShwYXJzZWRDb250ZW50LmtleXdvcmRzKSA/IHBhcnNlZENvbnRlbnQua2V5d29yZHMgOiBhbGxLZXl3b3JkcyxcclxuICAgICAgICBtb2RlbFVzZWQ6IE1PREVMXHJcbiAgICAgIH07XHJcbiAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+y1nOyihSDsmpTslb0gSlNPTiDtjIzsi7Eg7Jik66WYOicsIHBhcnNlRXJyb3IpO1xyXG4gICAgICBjb25zb2xlLmxvZygn7YyM7IuxIOyLpO2MqO2VnCDrgrTsmqk6JywgZmluYWxSZXNwb25zZS5jaG9pY2VzWzBdPy5tZXNzYWdlPy5jb250ZW50KTtcclxuICAgICAgXHJcbiAgICAgIC8vIO2CpOybjOuTnCDspJHrs7Ug7KCc6rGwIOuwjyDstZzrjIAgNeqwnOuhnCDsoJztlZxcclxuICAgICAgY29uc3QgdW5pcXVlS2V5d29yZHMgPSBBcnJheS5mcm9tKG5ldyBTZXQoYWxsS2V5d29yZHMpKS5zbGljZSgwLCA1KTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VtbWFyeTogJ+yalOyVveydhCDsg53shLHtlaAg7IiYIOyXhuyKteuLiOuLpC4nLFxyXG4gICAgICAgIGtleXdvcmRzOiB1bmlxdWVLZXl3b3JkcyxcclxuICAgICAgICBtb2RlbFVzZWQ6IE1PREVMXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xyXG4gICAgY29uc29sZS5lcnJvcign6ri0IOuMgO2ZlCDsmpTslb0g7KSRIOyYpOulmCDrsJzsg506JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3VtbWFyeTogJ+yalOyVveydhCDsg53shLHtlaAg7IiYIOyXhuyKteuLiOuLpC4nLFxyXG4gICAgICBrZXl3b3JkczogW10sXHJcbiAgICAgIG1vZGVsVXNlZDogTU9ERUxcclxuICAgIH07XHJcbiAgfVxyXG59ICJdLCJuYW1lcyI6WyJPcGVuQUkiLCJvcGVuYWkiLCJhcGlLZXkiLCJwcm9jZXNzIiwiZW52IiwiT1BFTkFJX0FQSV9LRVkiLCJNT0RFTCIsInN1bW1hcml6ZUNvbnZlcnNhdGlvbiIsInRpdGxlIiwibWVzc2FnZXMiLCJjb252ZXJzYXRpb25UZXh0IiwibWFwIiwibXNnIiwicm9sZSIsImNvbnRlbnQiLCJqb2luIiwicmVzcG9uc2UiLCJjaGF0IiwiY29tcGxldGlvbnMiLCJjcmVhdGUiLCJtb2RlbCIsInRlbXBlcmF0dXJlIiwibWF4X3Rva2VucyIsInJlc3BvbnNlX2Zvcm1hdCIsInR5cGUiLCJjaG9pY2VzIiwibWVzc2FnZSIsImNvbnNvbGUiLCJsb2ciLCJwYXJzZWRDb250ZW50IiwiSlNPTiIsInBhcnNlIiwic3VtbWFyeSIsImtleXdvcmRzIiwiQXJyYXkiLCJpc0FycmF5IiwibW9kZWxVc2VkIiwicGFyc2VFcnJvciIsImVycm9yIiwic3VtbWFyaXplTG9uZ0NvbnZlcnNhdGlvbiIsIm1lc3NhZ2VQYXJ0cyIsInBhcnRTaXplIiwiaSIsImxlbmd0aCIsInB1c2giLCJzbGljZSIsInBhcnRTdW1tYXJpZXMiLCJhbGxLZXl3b3JkcyIsInJlc3VsdCIsImZpbmFsUmVzcG9uc2UiLCJ1bmlxdWVLZXl3b3JkcyIsImZyb20iLCJTZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/utils/openai.ts\n");

/***/ }),

/***/ "(rsc)/./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatSource: () => (/* binding */ ChatSource)\n/* harmony export */ });\nvar ChatSource;\n(function(ChatSource) {\n    ChatSource[\"CHATGPT\"] = \"chatgpt\";\n    ChatSource[\"USER_INPUT\"] = \"user_input\";\n    ChatSource[\"API\"] = \"api\";\n})(ChatSource || (ChatSource = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvdHlwZXMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7VUFBWUE7Ozs7R0FBQUEsZUFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wa20tcHJvamVjdC8uL3NyYy90eXBlcy50cz8yNjljIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIENoYXRTb3VyY2Uge1xyXG4gIENIQVRHUFQgPSAnY2hhdGdwdCcsXHJcbiAgVVNFUl9JTlBVVCA9ICd1c2VyX2lucHV0JyxcclxuICBBUEkgPSAnYXBpJyxcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDaGF0TWVzc2FnZSB7XHJcbiAgcm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCcgfCAnc3lzdGVtJztcclxuICBjb250ZW50OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udmVyc2F0aW9uIHtcclxuICBpZD86IHN0cmluZztcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIG1lc3NhZ2VzOiBDaGF0TWVzc2FnZVtdO1xyXG4gIGNyZWF0ZWRBdDogRGF0ZSB8IHN0cmluZztcclxuICBzb3VyY2U6IENoYXRTb3VyY2U7XHJcbiAgdGFncz86IHN0cmluZ1tdO1xyXG4gIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55PjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb252ZXJzYXRpb25TdW1tYXJ5IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgc3VtbWFyeTogc3RyaW5nO1xyXG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xyXG4gIHNvdXJjZTogQ2hhdFNvdXJjZTtcclxuICB0YWdzPzogc3RyaW5nW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ3Mge1xyXG4gIG9ic2lkaWFuVmF1bHRQYXRoOiBzdHJpbmc7XHJcbiAgb3BlbmFpQXBpS2V5OiBzdHJpbmc7XHJcbiAgZGVmYXVsdFRhZ3M6IHN0cmluZ1tdO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBBcGlSZXNwb25zZTxUPiA9IHtcclxuICBzdWNjZXNzOiBib29sZWFuO1xyXG4gIGRhdGE/OiBUO1xyXG4gIGVycm9yPzogc3RyaW5nO1xyXG59O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdW1tYXJ5UmVzdWx0IHtcclxuICBzdW1tYXJ5OiBzdHJpbmc7XHJcbiAga2V5d29yZHM6IHN0cmluZ1tdO1xyXG4gIG1vZGVsVXNlZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENoYXRDaHVuayB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBjaGF0X3Nlc3Npb25faWQ6IHN0cmluZztcclxuICBjaHVua19pbmRleDogbnVtYmVyO1xyXG4gIGNvbnRlbnQ6IHN0cmluZztcclxuICBlbWJlZGRpbmc/OiBudW1iZXJbXTtcclxuICBzaW1pbGFyaXR5PzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENoYXRTZXNzaW9uIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgdXJsOiBzdHJpbmc7XHJcbiAgc3VtbWFyeTogc3RyaW5nO1xyXG4gIG1lc3NhZ2VzOiBDaGF0TWVzc2FnZVtdO1xyXG4gIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55PjtcclxuICBjcmVhdGVkX2F0Pzogc3RyaW5nO1xyXG4gIGVtYmVkZGluZz86IG51bWJlcltdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJhZ1NvdXJjZSB7XHJcbiAgaWQ/OiBzdHJpbmc7XHJcbiAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgdXJsPzogc3RyaW5nO1xyXG4gIHNpbWlsYXJpdHk/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmFnUmVzcG9uc2Uge1xyXG4gIGFuc3dlcjogc3RyaW5nO1xyXG4gIHNvdXJjZXM6IFJhZ1NvdXJjZVtdO1xyXG59ICJdLCJuYW1lcyI6WyJDaGF0U291cmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/types.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/automation.ts":
/*!*********************************!*\
  !*** ./src/utils/automation.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   commitToGitHub: () => (/* binding */ commitToGitHub),\n/* harmony export */   saveToObsidian: () => (/* binding */ saveToObsidian)\n/* harmony export */ });\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! util */ \"util\");\n/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _supabaseHandler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./supabaseHandler */ \"(rsc)/./src/utils/supabaseHandler.ts\");\n// 전역 MCP 타입 선언 추가\n\n\n\n\n// fs 함수를 Promise 기반으로 변환\nconst writeFileAsync = (0,util__WEBPACK_IMPORTED_MODULE_2__.promisify)((fs__WEBPACK_IMPORTED_MODULE_0___default().writeFile));\nconst mkdirAsync = (0,util__WEBPACK_IMPORTED_MODULE_2__.promisify)((fs__WEBPACK_IMPORTED_MODULE_0___default().mkdir));\nconst readFileAsync = (0,util__WEBPACK_IMPORTED_MODULE_2__.promisify)((fs__WEBPACK_IMPORTED_MODULE_0___default().readFile));\nconst existsAsync = (0,util__WEBPACK_IMPORTED_MODULE_2__.promisify)((fs__WEBPACK_IMPORTED_MODULE_0___default().exists));\n// 기본 저장 경로 설정 (Obsidian Vault 경로)\nconst DEFAULT_VAULT_PATH = \"C:/Users/user/Documents/Obsidian Vault\";\nconst CHATGPT_FOLDER = \"ChatGPT\";\nconst CONVERSATIONS_FOLDER = \"conversations\";\n/**\r\n * MCP가 사용 가능한지 확인합니다.\r\n */ function isMcpAvailable(mcpFunction) {\n    return typeof global.mcp !== \"undefined\" && typeof global.mcp[mcpFunction] === \"function\";\n}\n/**\r\n * 디렉토리가 존재하는지 확인하고 없으면 생성합니다.\r\n */ async function ensureDirectoryExists(dirPath) {\n    try {\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(dirPath)) {\n            await mkdirAsync(dirPath, {\n                recursive: true\n            });\n        }\n    } catch (error) {\n        console.error(`디렉토리 생성 오류 (${dirPath}):`, error);\n        throw error;\n    }\n}\n/**\r\n * URL이 이미 저장된 JSON 파일이 있는지 확인합니다.\r\n */ async function checkJsonFileExists(url) {\n    try {\n        // conversations 폴더 경로\n        const projectConversationPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), CONVERSATIONS_FOLDER);\n        // 폴더가 없으면 false 반환\n        if (!fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(projectConversationPath)) {\n            return false;\n        }\n        // URL 정규화 (쿼리 파라미터 등 제거)\n        const parsedUrl = new URL(url);\n        const normalizedUrl = parsedUrl.origin + parsedUrl.pathname;\n        const shareId = parsedUrl.pathname.split(\"/\").pop() || \"\";\n        // 모든 JSON 파일 목록 가져오기\n        const files = fs__WEBPACK_IMPORTED_MODULE_0___default().readdirSync(projectConversationPath).filter((file)=>file.endsWith(\".json\"));\n        // 각 파일을 확인하여 URL이 일치하는지 검사\n        for (const file of files){\n            const filePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(projectConversationPath, file);\n            const content = await readFileAsync(filePath, \"utf8\");\n            const data = JSON.parse(content);\n            if (data.url) {\n                // 완전히 일치하는 경우\n                if (data.url === url) {\n                    console.log(`완전히 일치하는 URL 발견: ${file}`);\n                    return true;\n                }\n                // 경로의 마지막 부분 (share ID) 비교\n                try {\n                    const existingParsedUrl = new URL(data.url);\n                    const existingShareId = existingParsedUrl.pathname.split(\"/\").pop() || \"\";\n                    if (shareId && existingShareId && shareId === existingShareId) {\n                        console.log(`공유 ID가 일치하는 URL 발견: ${file}`);\n                        return true;\n                    }\n                    // 정규화된 URL로 비교\n                    const existingNormalizedUrl = existingParsedUrl.origin + existingParsedUrl.pathname;\n                    if (normalizedUrl === existingNormalizedUrl) {\n                        console.log(`정규화된 URL이 일치하는 파일 발견: ${file}`);\n                        return true;\n                    }\n                } catch (parseError) {\n                    // URL 파싱 오류, 계속 진행\n                    console.error(\"기존 URL 파싱 오류:\", parseError);\n                }\n            }\n        }\n        return false;\n    } catch (error) {\n        console.error(\"JSON 파일 중복 확인 중 오류:\", error);\n        // 오류 발생 시 안전하게 중복이 아닌 것으로 처리\n        return false;\n    }\n}\n/**\r\n * 로컬 파일 시스템에 대화를 저장합니다.\r\n */ async function saveToFileSystem(fileName, markdownContent, rawText, conversation, summaryResult, url, skipJsonSave = false) {\n    try {\n        // Obsidian Vault 경로와 프로젝트 폴더 경로\n        const obsidianFolderPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(DEFAULT_VAULT_PATH, CHATGPT_FOLDER);\n        const projectConversationPath = path__WEBPACK_IMPORTED_MODULE_1___default().join(process.cwd(), CONVERSATIONS_FOLDER);\n        // 필요한 폴더 생성\n        await ensureDirectoryExists(obsidianFolderPath);\n        await ensureDirectoryExists(projectConversationPath);\n        // 마크다운 파일 저장 (Obsidian Vault에)\n        const markdownFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(obsidianFolderPath, fileName);\n        await writeFileAsync(markdownFilePath, markdownContent, \"utf8\");\n        console.log(`마크다운 파일 저장 완료: ${markdownFilePath}`);\n        // 원본 텍스트 저장 (Obsidian Vault에)\n        const textFileName = fileName.replace(\".md\", \"-original.txt\");\n        const textFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(obsidianFolderPath, textFileName);\n        await writeFileAsync(textFilePath, rawText, \"utf8\");\n        console.log(`원본 텍스트 파일 저장 완료: ${textFilePath}`);\n        // JSON 파일 저장 여부 확인 (중복 URL이면 저장하지 않음)\n        if (skipJsonSave) {\n            console.log(\"중복 URL이므로 JSON 파일 저장을 건너뜁니다.\");\n            return {\n                success: true,\n                files: {\n                    markdown: markdownFilePath,\n                    text: textFilePath\n                },\n                duplicate: true\n            };\n        }\n        // URL 중복 체크 (Supabase 및 로컬 JSON 파일)\n        const { exists: dbExists } = await (0,_supabaseHandler__WEBPACK_IMPORTED_MODULE_3__.checkUrlExists)(url);\n        const jsonExists = await checkJsonFileExists(url);\n        if (dbExists || jsonExists) {\n            console.log(\"이미 저장된 URL이므로 JSON 파일 저장을 건너뜁니다.\");\n            return {\n                success: true,\n                files: {\n                    markdown: markdownFilePath,\n                    text: textFilePath\n                },\n                duplicate: true\n            };\n        }\n        // JSON 형식으로 대화 저장 (PMKProject/conversations에)\n        const jsonFileName = `${conversation.title.toLowerCase().replace(/[^a-z0-9가-힣]/g, \"-\")}-${Date.now()}.json`;\n        const jsonFilePath = path__WEBPACK_IMPORTED_MODULE_1___default().join(projectConversationPath, jsonFileName);\n        // 메타데이터에 model 필드 추가 또는 수정\n        const metadataWithModel = {\n            ...conversation.metadata || {},\n            model: conversation.metadata?.model || \"gpt-4.1-nano\",\n            savedAt: new Date().toISOString()\n        };\n        await writeFileAsync(jsonFilePath, JSON.stringify({\n            title: conversation.title,\n            url,\n            summary: summaryResult.summary,\n            keywords: summaryResult.keywords,\n            messages: conversation.messages,\n            metadata: metadataWithModel,\n            createdAt: new Date().toISOString()\n        }, null, 2), \"utf8\");\n        console.log(`JSON 파일 저장 완료: ${jsonFilePath}`);\n        return {\n            success: true,\n            files: {\n                markdown: markdownFilePath,\n                text: textFilePath,\n                json: jsonFilePath\n            }\n        };\n    } catch (error) {\n        console.error(\"파일 시스템 저장 중 오류:\", error);\n        throw error;\n    }\n}\n/**\r\n * Obsidian Vault에 마크다운 노트를 생성합니다.\r\n */ async function saveToObsidian(conversation, summaryResult, rawText, url, skipDuplicateCheck = false) {\n    try {\n        // URL 중복 체크 (skipDuplicateCheck가 false일 때만)\n        if (!skipDuplicateCheck && url) {\n            // Supabase에서 중복 체크\n            const { exists, session } = await (0,_supabaseHandler__WEBPACK_IMPORTED_MODULE_3__.checkUrlExists)(url);\n            // 로컬 JSON 파일에서 중복 체크\n            const jsonExists = await checkJsonFileExists(url);\n            if (exists || jsonExists) {\n                console.log(`URL이 이미 존재합니다: ${url}`);\n                return {\n                    success: true,\n                    fileName: `${conversation.title.substring(0, 30)}.md (중복)`,\n                    duplicate: true,\n                    message: \"이미 저장된 대화입니다.\"\n                };\n            }\n        }\n        // 파일명 생성 (제목을 파일명으로 변환)\n        const fileName = conversation.title.toLowerCase().replace(/[^a-z0-9가-힣]/g, \"-\").replace(/-+/g, \"-\").replace(/^-|-$/g, \"\").substring(0, 100) + \".md\";\n        // 태그 목록 준비 (요약에서 추출한 키워드 + ChatGPT 모델)\n        const tags = [\n            ...summaryResult.keywords || [],\n            \"gpt-4.1-nano\"\n        ].filter(Boolean); // 빈 값 제거\n        // YAML 프론트매터 생성\n        const frontmatter = `---\r\ntitle: ${conversation.title}\r\ndate: ${new Date().toISOString()}\r\nsource: ${url}\r\ntags: [${tags.map((tag)=>`\"${tag}\"`).join(\", \")}]\r\nmodel: gpt-4.1-nano\r\n---\r\n\r\n`;\n        // 대화 내용을 마크다운으로 변환\n        let markdownContent = frontmatter;\n        // 대화 내용 추가\n        markdownContent += `# ${conversation.title}\\n\\n`;\n        // URL과 날짜 정보 추가\n        markdownContent += `> [원본 URL](${url})\\n\\n`;\n        markdownContent += `> 저장 시간: ${new Date().toLocaleString(\"ko-KR\")}\\n\\n`;\n        if (tags.length > 0) {\n            markdownContent += `> 태그: ${tags.join(\", \")}\\n\\n`;\n        }\n        markdownContent += `---\\n\\n`;\n        // 사용자-어시스턴트 대화 내용을 마크다운으로 포맷팅\n        conversation.messages.forEach((message, index)=>{\n            const isUser = message.role === \"user\";\n            const messageHeader = isUser ? \"## \\uD83D\\uDC64 사용자\" : \"## \\uD83E\\uDD16 assistant\";\n            // 역할과 내용을 구분하여 표시\n            markdownContent += `${messageHeader}\\n\\n${message.content}\\n\\n`;\n            // 마지막 메시지가 아니면 구분선 추가\n            if (index < conversation.messages.length - 1) {\n                markdownContent += `---\\n\\n`;\n            }\n        });\n        // 요약 섹션 추가\n        markdownContent += `\\n\\n---\\n\\n## 💡 요약\\n\\n${summaryResult.summary}\\n`;\n        // 키워드 섹션 추가\n        if (summaryResult.keywords && summaryResult.keywords.length > 0) {\n            markdownContent += `\\n## 🔑 키워드\\n\\n${summaryResult.keywords.map((k)=>`\\`${k}\\``).join(\" \")}\\n`;\n        }\n        // MCP 사용이 가능한지 확인\n        if (isMcpAvailable(\"obsidian-mcp_create-note\")) {\n            try {\n                // Obsidian MCP로 파일 저장\n                await new Promise((resolve, reject)=>{\n                    try {\n                        // @ts-ignore - MCP 타입 정의 없음\n                        global.mcp[\"obsidian-mcp_create-note\"]({\n                            vault: \"obsidian-vault\",\n                            folder: \"ChatGPT\",\n                            filename: fileName,\n                            content: markdownContent\n                        }, (result)=>{\n                            if (result.error) {\n                                reject(new Error(`Obsidian 저장 실패: ${result.error}`));\n                            } else {\n                                resolve(result);\n                            }\n                        });\n                    } catch (error) {\n                        reject(error);\n                    }\n                });\n                // 원본 텍스트 내용 저장\n                const textFileName = fileName.replace(\".md\", \"-original.txt\");\n                await new Promise((resolve, reject)=>{\n                    try {\n                        // @ts-ignore - MCP 타입 정의 없음\n                        global.mcp[\"obsidian-mcp_create-note\"]({\n                            vault: \"obsidian-vault\",\n                            folder: \"ChatGPT\",\n                            filename: textFileName,\n                            content: rawText\n                        }, (result)=>{\n                            if (result.error) {\n                                reject(new Error(`Obsidian 원본 텍스트 저장 실패: ${result.error}`));\n                            } else {\n                                resolve(result);\n                            }\n                        });\n                    } catch (error) {\n                        reject(error);\n                    }\n                });\n                return {\n                    success: true,\n                    fileName,\n                    method: \"mcp\"\n                };\n            } catch (mcpError) {\n                console.error(\"MCP 저장 실패, 파일 시스템으로 대체합니다:\", mcpError);\n            // MCP 실패 시 아래의 파일 시스템 방식으로 진행\n            }\n        }\n        // MCP가 없거나 실패한 경우, 파일 시스템 사용하여 저장\n        console.log(\"MCP를 사용할 수 없습니다. 파일 시스템을 사용하여 저장합니다.\");\n        // 파일 시스템에 저장 (URL 중복 여부 전달)\n        const fileSystemResult = await saveToFileSystem(fileName, markdownContent, rawText, conversation, summaryResult, url, skipDuplicateCheck // 중복 URL이면 JSON 저장 건너뛰기\n        );\n        return {\n            success: true,\n            fileName,\n            method: \"filesystem\",\n            files: fileSystemResult.files,\n            duplicate: fileSystemResult.duplicate\n        };\n    } catch (error) {\n        console.error(\"Obsidian 저장 중 오류:\", error);\n        // 오류가 발생해도 RAG 시스템 진행에는 영향을 주지 않도록 성공 상태 반환\n        return {\n            success: true,\n            fileName: `${conversation.title.substring(0, 30)}.md (저장 실패)`,\n            error: error instanceof Error ? error.message : \"알 수 없는 오류\"\n        };\n    }\n}\n/**\r\n * GitHub 저장소에 변경사항을 커밋하고 푸시합니다.\r\n */ async function commitToGitHub(message = \"Update ChatGPT conversations\") {\n    try {\n        // MCP 사용이 가능한지 확인\n        if (isMcpAvailable(\"mcp_github_push_files\")) {\n            // GitHub 저장소의 변경사항 확인\n            const result = await new Promise((resolve, reject)=>{\n                try {\n                    // @ts-ignore - MCP 타입 정의 없음\n                    global.mcp[\"mcp_github_push_files\"]({\n                        repo: \"PKMProjet\",\n                        branch: \"main\",\n                        message,\n                        files: [\n                            {\n                                path: \"ChatGPT\",\n                                recursive: true // 하위 파일 포함\n                            }\n                        ]\n                    }, (result)=>{\n                        if (result.error) {\n                            reject(new Error(`GitHub 커밋 실패: ${result.error}`));\n                        } else {\n                            resolve(result);\n                        }\n                    });\n                } catch (error) {\n                    reject(error);\n                }\n            });\n            return {\n                success: true,\n                result,\n                method: \"mcp\"\n            };\n        } else {\n            // MCP를 사용할 수 없는 경우 로그만 남기고 성공으로 처리\n            console.log(\"GitHub MCP를 사용할 수 없습니다. 커밋 작업은 건너뜁니다.\");\n            return {\n                success: true,\n                method: \"skipped\",\n                message: \"GitHub 커밋 기능은 MCP 환경에서만 사용 가능합니다.\"\n            };\n        }\n    } catch (error) {\n        console.error(\"GitHub 커밋 중 오류:\", error);\n        // 오류가 발생해도 RAG 시스템 진행에는 영향을 주지 않도록 성공 상태 반환\n        return {\n            success: true,\n            method: \"failed\",\n            error: error instanceof Error ? error.message : \"알 수 없는 오류\"\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/automation.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/conversationHandler.ts":
/*!******************************************!*\
  !*** ./src/utils/conversationHandler.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   saveConversation: () => (/* binding */ saveConversation)\n/* harmony export */ });\n/* harmony import */ var _lib_utils_chatgpt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/utils/chatgpt */ \"(rsc)/./src/lib/utils/chatgpt.ts\");\n/* harmony import */ var _lib_utils_openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/utils/openai */ \"(rsc)/./src/lib/utils/openai.ts\");\n/* harmony import */ var _utils_supabaseHandler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/supabaseHandler */ \"(rsc)/./src/utils/supabaseHandler.ts\");\n/* harmony import */ var _utils_automation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/automation */ \"(rsc)/./src/utils/automation.ts\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n// 환경 확인\nconst isVercel = process.env.VERCEL === \"1\" || process.env.NEXT_PUBLIC_VERCEL_ENV === \"production\";\n/**\r\n * ChatGPT 대화를 저장하는 통합 핸들러\r\n */ async function saveConversation(url, options = {\n    saveToSupabase: true,\n    saveToObsidian: true,\n    saveAsJson: true\n}) {\n    try {\n        console.log(`대화 저장 시작: ${url}`);\n        console.log(\"저장 옵션:\", JSON.stringify(options));\n        // URL 유효성 검사\n        if (!isValidChatGPTUrl(url)) {\n            throw new Error(\"유효한 ChatGPT 공유 URL이 아닙니다.\");\n        }\n        // URL 중복 체크 (Supabase)\n        let duplicate = false;\n        let existingSession = null;\n        if (options.saveToSupabase && !options.skipDuplicateCheck) {\n            const { exists, session } = await (0,_utils_supabaseHandler__WEBPACK_IMPORTED_MODULE_2__.checkUrlExists)(url);\n            duplicate = exists;\n            existingSession = session;\n            if (duplicate) {\n                console.log(`URL 중복 감지: ${url}`);\n                return {\n                    success: true,\n                    duplicate: true,\n                    id: existingSession?.id,\n                    title: existingSession?.title,\n                    error: \"이미 저장된 대화입니다.\"\n                };\n            }\n        }\n        // 크롤링 수행\n        console.log(\"대화 크롤링 중...\");\n        const result = await (0,_lib_utils_chatgpt__WEBPACK_IMPORTED_MODULE_0__.parseChatGPTLink)(url);\n        const { conversation, rawText } = result;\n        if (!conversation.messages || conversation.messages.length === 0) {\n            throw new Error(\"대화 내용을 찾을 수 없습니다.\");\n        }\n        // 요약 생성\n        console.log(\"대화 요약 생성 중...\");\n        const summaryResult = conversation.messages.length > 20 ? await (0,_lib_utils_openai__WEBPACK_IMPORTED_MODULE_1__.summarizeLongConversation)(conversation.title, conversation.messages) : await (0,_lib_utils_openai__WEBPACK_IMPORTED_MODULE_1__.summarizeConversation)(conversation.title, conversation.messages);\n        let saveResults = {\n            supabase: null,\n            obsidian: null,\n            json: undefined\n        };\n        // Supabase에 저장 (벡터 검색 DB)\n        if (options.saveToSupabase) {\n            console.log(\"Supabase에 저장 중...\");\n            saveResults.supabase = await (0,_utils_supabaseHandler__WEBPACK_IMPORTED_MODULE_2__.insertChatSession)({\n                title: conversation.title,\n                url,\n                summary: summaryResult.summary,\n                messages: conversation.messages,\n                metadata: {\n                    model: summaryResult.modelUsed || conversation.metadata?.model || \"gpt-4\",\n                    keywords: summaryResult.keywords || [],\n                    createdAt: new Date().toISOString()\n                },\n                skipDuplicateCheck: true\n            });\n            // 대화 청크 처리 및 임베딩 저장\n            await (0,_utils_supabaseHandler__WEBPACK_IMPORTED_MODULE_2__.processAndInsertChunks)(saveResults.supabase.id, conversation.messages);\n        }\n        // Obsidian에 저장\n        if (options.saveToObsidian) {\n            console.log(\"Obsidian에 저장 중...\");\n            saveResults.obsidian = await (0,_utils_automation__WEBPACK_IMPORTED_MODULE_3__.saveToObsidian)(conversation, summaryResult, rawText, url);\n        }\n        // JSON 파일로 백업\n        if (options.saveAsJson && !isVercel) {\n            console.log(\"JSON 파일로 백업 중...\");\n            saveResults.json = await saveAsJsonFile(conversation.title, conversation.messages, rawText, url, summaryResult);\n        }\n        return {\n            success: true,\n            id: saveResults.supabase?.id,\n            title: conversation.title,\n            summary: summaryResult.summary,\n            keywords: summaryResult.keywords,\n            obsidian: saveResults.obsidian,\n            jsonBackup: saveResults.json,\n            duplicate: false\n        };\n    } catch (error) {\n        console.error(\"대화 저장 중 오류:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"알 수 없는 오류가 발생했습니다.\"\n        };\n    }\n}\n/**\r\n * 대화를 JSON 파일로 저장\r\n */ async function saveAsJsonFile(title, messages, rawText, url, summaryResult) {\n    try {\n        // conversations 디렉토리 확인 및 생성\n        const conversationsDir = path__WEBPACK_IMPORTED_MODULE_5__.join(process.cwd(), \"conversations\");\n        await fs_promises__WEBPACK_IMPORTED_MODULE_4__.mkdir(conversationsDir, {\n            recursive: true\n        });\n        // 파일명 생성 (제목에서 유효하지 않은 문자 제거)\n        const sanitizedTitle = title.replace(/[/\\\\?%*:|\"<>]/g, \"-\").replace(/\\s+/g, \"-\").toLowerCase();\n        const fileName = `${sanitizedTitle}-${Date.now()}.json`;\n        const filePath = path__WEBPACK_IMPORTED_MODULE_5__.join(conversationsDir, fileName);\n        // 대화 데이터 저장\n        const conversationData = {\n            title,\n            url,\n            timestamp: new Date().toISOString(),\n            messages,\n            rawText,\n            summary: summaryResult.summary,\n            keywords: summaryResult.keywords\n        };\n        await fs_promises__WEBPACK_IMPORTED_MODULE_4__.writeFile(filePath, JSON.stringify(conversationData, null, 2), \"utf-8\");\n        console.log(`JSON 파일 저장 완료: ${filePath}`);\n        return filePath;\n    } catch (error) {\n        console.error(\"JSON 파일 저장 중 오류:\", error);\n        throw error;\n    }\n}\n/**\r\n * ChatGPT 공유 URL 유효성 검사\r\n */ function isValidChatGPTUrl(url) {\n    try {\n        const parsedUrl = new URL(url);\n        return (parsedUrl.hostname === \"chat.openai.com\" || parsedUrl.hostname === \"chatgpt.com\") && url.includes(\"/share/\");\n    } catch (e) {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/conversationHandler.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/embeddings.ts":
/*!*********************************!*\
  !*** ./src/utils/embeddings.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunkMessages: () => (/* binding */ chunkMessages),\n/* harmony export */   getEmbedding: () => (/* binding */ getEmbedding),\n/* harmony export */   truncateText: () => (/* binding */ truncateText)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var gpt_tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gpt-tokenizer */ \"(rsc)/./node_modules/gpt-tokenizer/esm/main.js\");\n\n\n// OpenAI API 클라이언트 초기화\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n/**\n * 텍스트에서 유효하지 않은 문자를 제거합니다.\n * 특히 \\u0000(NULL) 문자와 기타 PostgreSQL에서 문제를 일으킬 수 있는 문자를 제거합니다.\n */ function sanitizeText(text) {\n    if (!text) return \"\";\n    // null 문자 및 제어 문자 제거\n    let sanitized = text.replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, \" \");\n    // PostgreSQL에서 문제가 될 수 있는 특수 이스케이프 시퀀스 처리\n    sanitized = sanitized.replace(/\\\\u0000/g, \"\");\n    // 연속된 공백 제거\n    sanitized = sanitized.replace(/\\s+/g, \" \");\n    return sanitized.trim();\n}\n/**\n * 텍스트에 대한 임베딩 벡터를 생성합니다.\n * @param text 임베딩할 텍스트\n * @returns 임베딩 벡터\n */ async function getEmbedding(text) {\n    try {\n        // 텍스트 정제\n        const sanitizedText = sanitizeText(text);\n        if (!sanitizedText) {\n            console.warn(\"임베딩 생성을 위한 텍스트가 비어있습니다.\");\n            // 빈 텍스트의 경우 기본 임베딩 값 반환 (모두 0)\n            return Array(1536).fill(0);\n        }\n        // 텍스트가 너무 짧은 경우 (1-2글자) 처리\n        if (sanitizedText.length < 3) {\n            console.warn(`임베딩 생성을 위한 텍스트가 너무 짧습니다: \"${sanitizedText}\"`);\n            // 짧은 텍스트 확장 (의미를 유지하면서 컨텍스트 추가)\n            const expandedText = `질문: ${sanitizedText} 에 대한 정보를 찾습니다.`;\n            console.log(`확장된 텍스트로 임베딩 생성: \"${expandedText}\"`);\n            const response = await openai.embeddings.create({\n                model: \"text-embedding-3-small\",\n                input: expandedText\n            });\n            return response.data[0].embedding;\n        }\n        // 일반적인 경우 임베딩 생성\n        const response = await openai.embeddings.create({\n            model: \"text-embedding-3-small\",\n            input: sanitizedText\n        });\n        return response.data[0].embedding;\n    } catch (error) {\n        console.error(\"임베딩 생성 중 오류:\", error);\n        // 오류 발생 시 재시도 (다른 모델 사용)\n        try {\n            console.log(\"대체 임베딩 모델로 재시도합니다.\");\n            const response = await openai.embeddings.create({\n                model: \"text-embedding-ada-002\",\n                input: sanitizeText(text) || \"빈 쿼리\"\n            });\n            return response.data[0].embedding;\n        } catch (retryError) {\n            console.error(\"대체 임베딩 생성 중 오류:\", retryError);\n            // 모든 시도 실패 시 기본 임베딩 반환\n            return Array(1536).fill(0);\n        }\n    }\n}\n/**\n * 토큰 제한에 맞게 텍스트를 자릅니다.\n * @param text 원본 텍스트\n * @param maxTokens 최대 토큰 수 (기본값 8000)\n * @returns 잘린 텍스트\n */ function truncateText(text, maxTokens = 8000) {\n    const tokens = (0,gpt_tokenizer__WEBPACK_IMPORTED_MODULE_0__.encode)(text);\n    if (tokens.length <= maxTokens) {\n        return text;\n    }\n    // 수정된 부분\n    const truncatedTokens = tokens.slice(0, maxTokens);\n    return (0,gpt_tokenizer__WEBPACK_IMPORTED_MODULE_0__.decode)(truncatedTokens); // 잘못된 직접 구현 함수가 아니라 공식 함수 사용\n}\n/**\n * 대화 메시지를 청크로 분할합니다.\n * @param messages 메시지 배열\n * @param maxTokensPerChunk 청크당 최대 토큰 수 (기본값 500)\n * @returns 청크 배열\n */ function chunkMessages(messages, maxTokensPerChunk = 500) {\n    const chunks = [];\n    let currentChunk = \"\";\n    let currentTokens = 0;\n    let chunkIndex = 0;\n    for(let i = 0; i < messages.length; i++){\n        const message = messages[i];\n        const messageText = `[${message.role}]: ${message.content}`;\n        const messageTokens = (0,gpt_tokenizer__WEBPACK_IMPORTED_MODULE_0__.encode)(messageText).length;\n        // 단일 메시지가 청크 제한을 초과하는 경우 (분할 필요)\n        if (messageTokens > maxTokensPerChunk) {\n            // 현재 축적된 청크가 있다면 먼저 저장\n            if (currentTokens > 0) {\n                chunks.push({\n                    content: currentChunk.trim(),\n                    chunk_index: chunkIndex++\n                });\n                currentChunk = \"\";\n                currentTokens = 0;\n            }\n            // 긴 메시지를 여러 청크로 분할\n            const tokens = (0,gpt_tokenizer__WEBPACK_IMPORTED_MODULE_0__.encode)(messageText);\n            for(let j = 0; j < tokens.length; j += maxTokensPerChunk){\n                const chunkTokens = tokens.slice(j, j + maxTokensPerChunk);\n                chunks.push({\n                    content: (0,gpt_tokenizer__WEBPACK_IMPORTED_MODULE_0__.decode)(chunkTokens).trim(),\n                    chunk_index: chunkIndex++\n                });\n            }\n        } else if (currentTokens + messageTokens <= maxTokensPerChunk) {\n            currentChunk += (currentChunk ? \"\\n\\n\" : \"\") + messageText;\n            currentTokens += messageTokens;\n        } else {\n            chunks.push({\n                content: currentChunk.trim(),\n                chunk_index: chunkIndex++\n            });\n            currentChunk = messageText;\n            currentTokens = messageTokens;\n        }\n    }\n    // 마지막 청크 추가\n    if (currentTokens > 0) {\n        chunks.push({\n            content: currentChunk.trim(),\n            chunk_index: chunkIndex\n        });\n    }\n    return chunks;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/embeddings.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/supabaseHandler.ts":
/*!**************************************!*\
  !*** ./src/utils/supabaseHandler.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkUrlExists: () => (/* binding */ checkUrlExists),\n/* harmony export */   getAllChatSessions: () => (/* binding */ getAllChatSessions),\n/* harmony export */   getChatSessionById: () => (/* binding */ getChatSessionById),\n/* harmony export */   getChunksBySessionId: () => (/* binding */ getChunksBySessionId),\n/* harmony export */   insertChatSession: () => (/* binding */ insertChatSession),\n/* harmony export */   processAndInsertChunks: () => (/* binding */ processAndInsertChunks),\n/* harmony export */   searchChatSessions: () => (/* binding */ searchChatSessions),\n/* harmony export */   searchSimilarChunks: () => (/* binding */ searchSimilarChunks),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./src/lib/supabase.ts\");\n/* harmony import */ var _embeddings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./embeddings */ \"(rsc)/./src/utils/embeddings.ts\");\n\n\n// Supabase 클라이언트 재사용\nconst supabase = _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin;\n/**\r\n * JSON 데이터를 안전하게 처리합니다.\r\n * PostgreSQL에 저장하기 전 유효하지 않은 문자나 구조를 제거합니다.\r\n */ function sanitizeJsonData(data) {\n    if (!data) return null;\n    if (typeof data === \"string\") {\n        // 문자열에서 제어 문자 제거 및 유니코드 문자 처리 개선\n        return data.replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, \" \") // 제어 문자 제거\n        .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, (match)=>match) // 올바른 유니코드 이모지 유지\n        .replace(/\\uFFFD/g, \"\") // 대체 문자 제거\n        .replace(/\\s+/g, \" \") // 연속된 공백 제거\n        .trim();\n    }\n    if (Array.isArray(data)) {\n        // 배열의 각 항목 정제\n        return data.map((item)=>sanitizeJsonData(item));\n    }\n    if (typeof data === \"object\" && data !== null) {\n        // 객체의 각 필드 정제\n        const sanitized = {};\n        for(const key in data){\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                sanitized[key] = sanitizeJsonData(data[key]);\n            }\n        }\n        return sanitized;\n    }\n    // 기본 자료형은 그대로 반환\n    return data;\n}\n/**\r\n * URL이 이미 저장되어 있는지 확인합니다.\r\n * @param url 확인할 URL\r\n * @returns 중복 여부와 기존 세션 정보\r\n */ async function checkUrlExists(url) {\n    try {\n        // URL 정규화 (쿼리 파라미터 등 제거)\n        const normalizedUrl = new URL(url).origin + new URL(url).pathname;\n        // 정규화된 URL로 시작하는 세션 검색\n        const { data, error } = await supabase.from(\"chat_sessions\").select(\"id, title, url, summary, created_at\").ilike(\"url\", `${normalizedUrl}%`).limit(1);\n        if (error) {\n            console.error(\"URL 중복 확인 중 오류:\", error);\n            throw error;\n        }\n        if (data && data.length > 0) {\n            return {\n                exists: true,\n                session: data[0]\n            };\n        }\n        return {\n            exists: false\n        };\n    } catch (error) {\n        console.error(\"URL 중복 확인 중 오류:\", error);\n        // 오류 발생 시 안전하게 중복이 아닌 것으로 처리\n        return {\n            exists: false\n        };\n    }\n}\n/**\r\n * 대화 세션을 Supabase에 저장합니다.\r\n */ async function insertChatSession({ title, url, summary, messages, metadata = {}, skipDuplicateCheck = false }) {\n    try {\n        // URL 중복 확인 (skipDuplicateCheck가 false일 때만)\n        if (!skipDuplicateCheck && url) {\n            const { exists, session } = await checkUrlExists(url);\n            if (exists) {\n                console.log(`URL이 이미 존재합니다: ${url}`);\n                console.log(`기존 세션 정보: ${session?.title} (${session?.id})`);\n                return {\n                    id: session?.id,\n                    duplicate: true,\n                    message: \"이미 저장된 대화입니다.\"\n                };\n            }\n        }\n        // 데이터 정제\n        const sanitizedTitle = sanitizeJsonData(title);\n        const sanitizedSummary = sanitizeJsonData(summary);\n        const sanitizedMessages = sanitizeJsonData(messages);\n        const sanitizedMetadata = sanitizeJsonData(metadata);\n        // 요약 텍스트 임베딩 생성\n        const embedding = await (0,_embeddings__WEBPACK_IMPORTED_MODULE_1__.getEmbedding)(sanitizedSummary);\n        // 세션 데이터 삽입\n        const { data, error } = await supabase.from(\"chat_sessions\").insert({\n            title: sanitizedTitle,\n            url,\n            summary: sanitizedSummary,\n            messages: sanitizedMessages,\n            metadata: sanitizedMetadata,\n            embedding\n        }).select(\"id\").single();\n        if (error) throw error;\n        return {\n            ...data,\n            duplicate: false\n        };\n    } catch (error) {\n        console.error(\"대화 세션 저장 중 오류:\", error);\n        throw error;\n    }\n}\n/**\r\n * 대화 청크를 생성하고 Supabase에 저장합니다.\r\n */ async function processAndInsertChunks(sessionId, messages) {\n    try {\n        // 메시지 정제\n        const sanitizedMessages = sanitizeJsonData(messages);\n        // 메시지를 청크로 분할\n        const chunks = (0,_embeddings__WEBPACK_IMPORTED_MODULE_1__.chunkMessages)(sanitizedMessages);\n        console.log(\"\\uD83E\\uDDF1 분할된 청크:\", chunks);\n        // 각 청크에 대해 임베딩 생성 및 저장\n        const chunkPromises = chunks.map(async (chunk)=>{\n            // 청크 내용 정제\n            const sanitizedContent = sanitizeJsonData(chunk.content);\n            const embedding = await (0,_embeddings__WEBPACK_IMPORTED_MODULE_1__.getEmbedding)(sanitizedContent);\n            return {\n                chat_session_id: sessionId,\n                chunk_index: chunk.chunk_index,\n                content: sanitizedContent,\n                embedding\n            };\n        });\n        // 모든 청크 임베딩 처리 완료 대기\n        const chunksWithEmbeddings = await Promise.all(chunkPromises);\n        // 청크 데이터 삽입 (최대 1MB 제한으로 청크 10개씩 배치 처리)\n        const batchSize = 10;\n        const results = [];\n        for(let i = 0; i < chunksWithEmbeddings.length; i += batchSize){\n            const batch = chunksWithEmbeddings.slice(i, i + batchSize);\n            try {\n                const { data, error } = await supabase.from(\"chat_chunks\").insert(batch);\n                if (error) throw error;\n                results.push(data);\n            } catch (error) {\n                console.error(`청크 배치 ${i}/${chunksWithEmbeddings.length} 저장 중 오류:`, error);\n            // 개별 청크 에러를 기록하되 전체 프로세스는 계속 진행\n            }\n        }\n        return {\n            success: true,\n            count: chunksWithEmbeddings.length\n        };\n    } catch (error) {\n        console.error(\"청크 처리 및 저장 중 오류:\", error);\n        throw error;\n    }\n}\n/**\r\n * 유사한 청크를 검색합니다.\r\n */ async function searchSimilarChunks(query, similarity = 0.3, limit = 10) {\n    try {\n        // 메타 질문 감지 (예: \"이 대화의 핵심이 뭐야?\", \"요약해줘\" 등)\n        const metaQuestionPatterns = [\n            /이\\s*대화의?\\s*(핵심|요약|내용|주제)/i,\n            /대화를?\\s*(요약|정리)/i,\n            /요약해\\s*줘/i,\n            /핵심\\s*(내용|포인트)/i,\n            /주요\\s*(내용|포인트)/i\n        ];\n        const isMetaQuestion = metaQuestionPatterns.some((pattern)=>pattern.test(query));\n        if (isMetaQuestion) {\n            console.log(\"메타 질문 감지됨, 모든 세션의 요약 정보를 검색합니다.\");\n            // 메타 질문인 경우 가장 최근 세션의 요약 정보를 가져오기\n            const { data: sessionData, error: sessionError } = await supabase.from(\"chat_sessions\").select(\"id, title, summary\").order(\"created_at\", {\n                ascending: false\n            }).limit(1);\n            if (sessionError || !sessionData || sessionData.length === 0) {\n                console.warn(\"세션 데이터를 찾을 수 없습니다.\");\n                return [];\n            }\n            // 세션의 요약 정보를 청크로 변환하여 반환\n            const session = sessionData[0];\n            const fakeChunk = {\n                id: \"meta-question-chunk\",\n                chat_session_id: session.id,\n                chunk_index: 0,\n                content: `[요약]: ${session.summary}`,\n                similarity: 1.0\n            };\n            return [\n                fakeChunk\n            ];\n        }\n        console.log(`검색 쿼리: \"${query}\", 유사도 임계값: ${similarity}, 제한: ${limit}`);\n        // 쿼리 텍스트 정제\n        const sanitizedQuery = sanitizeJsonData(query);\n        console.log(`정제된 쿼리: \"${sanitizedQuery}\"`);\n        if (!sanitizedQuery || sanitizedQuery.trim().length < 2) {\n            console.warn(\"쿼리가 너무 짧거나 비어 있습니다\");\n            return [];\n        }\n        // 쿼리 텍스트 임베딩 생성\n        const queryEmbedding = await (0,_embeddings__WEBPACK_IMPORTED_MODULE_1__.getEmbedding)(sanitizedQuery);\n        console.log(`임베딩 생성 완료: ${queryEmbedding.length} 차원`);\n        // 유사한 청크 검색\n        const { data, error } = await supabase.rpc(\"match_chunks\", {\n            query_embedding: queryEmbedding,\n            match_threshold: similarity,\n            match_count: limit\n        });\n        if (error) {\n            console.error(\"유사 청크 검색 오류:\", error);\n            throw error;\n        }\n        console.log(`검색된 청크 수: ${data?.length || 0}`);\n        // 검색 결과가 없는 경우 유사도 임계값을 낮춰서 다시 시도 (2단계로 낮춤)\n        if (!data || data.length === 0) {\n            // 첫 번째 재시도: 임계값을 50% 낮춤\n            const lowerThreshold = similarity * 0.5;\n            console.log(`결과가 없어 유사도 임계값을 ${lowerThreshold.toFixed(2)}로 낮춰 재시도`);\n            const { data: retryData, error: retryError } = await supabase.rpc(\"match_chunks\", {\n                query_embedding: queryEmbedding,\n                match_threshold: lowerThreshold,\n                match_count: limit\n            });\n            if (retryError) {\n                console.error(\"낮은 임계값으로 재시도 중 오류:\", retryError);\n            } else if (retryData && retryData.length > 0) {\n                console.log(`낮은 임계값으로 ${retryData.length}개 청크 검색됨`);\n                return retryData;\n            } else {\n                // 두 번째 재시도: 매우 낮은 임계값 (0.1)으로 시도\n                const lowestThreshold = 0.1;\n                console.log(`결과가 여전히 없어 최저 임계값 ${lowestThreshold.toFixed(2)}로 재시도`);\n                const { data: lastRetryData, error: lastRetryError } = await supabase.rpc(\"match_chunks\", {\n                    query_embedding: queryEmbedding,\n                    match_threshold: lowestThreshold,\n                    match_count: limit\n                });\n                if (lastRetryError) {\n                    console.error(\"최저 임계값으로 재시도 중 오류:\", lastRetryError);\n                } else if (lastRetryData && lastRetryData.length > 0) {\n                    console.log(`최저 임계값으로 ${lastRetryData.length}개 청크 검색됨`);\n                    return lastRetryData;\n                }\n            }\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"유사 청크 검색 중 오류:\", error);\n        throw error;\n    }\n}\n/**\r\n * 세션 ID로 대화 세션을 조회합니다.\r\n */ async function getChatSessionById(id) {\n    const { data, error } = await supabase.from(\"chat_sessions\").select(\"*\").eq(\"id\", id).single();\n    if (error) throw error;\n    return data;\n}\n/**\r\n * 모든 대화 세션을 조회합니다.\r\n * 요약 정보만 반환합니다 (전체 메시지는 제외).\r\n */ async function getAllChatSessions() {\n    const { data, error } = await supabase.from(\"chat_sessions\").select(\"id, title, url, summary, created_at, metadata\").order(\"created_at\", {\n        ascending: false\n    });\n    if (error) throw error;\n    return data;\n}\n/**\r\n * 대화 세션의 모든 청크를 가져옵니다.\r\n */ async function getChunksBySessionId(sessionId) {\n    const { data, error } = await supabase.from(\"chat_chunks\").select(\"*\").eq(\"chat_session_id\", sessionId).order(\"chunk_index\", {\n        ascending: true\n    });\n    if (error) throw error;\n    return data;\n}\n/**\r\n * 키워드로 대화 세션을 검색합니다.\r\n */ async function searchChatSessions(keyword) {\n    const { data, error } = await supabase.from(\"chat_sessions\").select(\"id, title, url, summary, created_at, metadata\").or(`title.ilike.%${keyword}%,summary.ilike.%${keyword}%`).order(\"created_at\", {\n        ascending: false\n    });\n    if (error) throw error;\n    return data;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/supabaseHandler.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/gpt-tokenizer","vendor-chunks/@supabase","vendor-chunks/openai","vendor-chunks/tr46","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/whatwg-url","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/form-data-encoder","vendor-chunks/webidl-conversions","vendor-chunks/abort-controller","vendor-chunks/ms","vendor-chunks/humanize-ms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fconversations%2Froute&page=%2Fapi%2Fconversations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fconversations%2Froute.ts&appDir=C%3A%5CpmkProject%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CpmkProject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();