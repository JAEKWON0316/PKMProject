"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/conversations/route";
exports.ids = ["app/api/conversations/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "playwright":
/*!*****************************!*\
  !*** external "playwright" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("playwright");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fconversations%2Froute&page=%2Fapi%2Fconversations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fconversations%2Froute.ts&appDir=C%3A%5CpmkProject%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CpmkProject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fconversations%2Froute&page=%2Fapi%2Fconversations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fconversations%2Froute.ts&appDir=C%3A%5CpmkProject%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CpmkProject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_pmkProject_src_app_api_conversations_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/conversations/route.ts */ \"(rsc)/./src/app/api/conversations/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/conversations/route\",\n        pathname: \"/api/conversations\",\n        filename: \"route\",\n        bundlePath: \"app/api/conversations/route\"\n    },\n    resolvedPagePath: \"C:\\\\pmkProject\\\\src\\\\app\\\\api\\\\conversations\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_pmkProject_src_app_api_conversations_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/conversations/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjb252ZXJzYXRpb25zJTJGcm91dGUmcGFnZT0lMkZhcGklMkZjb252ZXJzYXRpb25zJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY29udmVyc2F0aW9ucyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDcG1rUHJvamVjdCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q3Bta1Byb2plY3QmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDTTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL3BrbS1wcm9qZWN0Lz82YzkyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXHBta1Byb2plY3RcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcY29udmVyc2F0aW9uc1xcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY29udmVyc2F0aW9ucy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2NvbnZlcnNhdGlvbnNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2NvbnZlcnNhdGlvbnMvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxwbWtQcm9qZWN0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGNvbnZlcnNhdGlvbnNcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvY29udmVyc2F0aW9ucy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fconversations%2Froute&page=%2Fapi%2Fconversations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fconversations%2Froute.ts&appDir=C%3A%5CpmkProject%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CpmkProject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/conversations/route.ts":
/*!********************************************!*\
  !*** ./src/app/api/conversations/route.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_utils_chatgpt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/utils/chatgpt */ \"(rsc)/./src/lib/utils/chatgpt.ts\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm/v4.js\");\n\n\n\n\n\nasync function POST(request) {\n    try {\n        console.log(\"=== Processing conversation request ===\");\n        const body = await request.json().catch((e)=>{\n            console.error(\"Failed to parse request body:\", e);\n            return null;\n        });\n        if (!body || !body.url) {\n            console.error(\"Missing URL in request body\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"ChatGPT 공유 URL이 필요합니다.\"\n            }, {\n                status: 400\n            });\n        }\n        const { url } = body;\n        console.log(`Processing URL: \"${url}\"`);\n        // URL 유효성 검사\n        if (!isValidChatGPTUrl(url)) {\n            console.error(\"Invalid URL format or domain\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"유효한 ChatGPT 공유 URL이 아닙니다.\"\n            }, {\n                status: 400\n            });\n        }\n        // ChatGPT 링크 파싱 (Playwright 기반)\n        console.log(\"=== Starting Playwright parsing ===\");\n        let result;\n        try {\n            result = await (0,_lib_utils_chatgpt__WEBPACK_IMPORTED_MODULE_1__.parseChatGPTLink)(url);\n            console.log(`Parsed conversation: \"${result.conversation.title}\" with ${result.conversation.messages.length} messages`);\n            console.log(`Raw HTML length: ${result.rawHtml.length} characters`);\n        } catch (error) {\n            console.error(\"Error parsing conversation:\", error);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: error instanceof Error ? error.message : \"대화 내용을 추출할 수 없습니다.\"\n            }, {\n                status: 422\n            });\n        }\n        const { conversation, rawText } = result;\n        // 메시지 유효성 검사\n        if (!conversation.messages || conversation.messages.length === 0) {\n            console.error(\"No messages found in conversation\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"대화 내용을 찾을 수 없습니다.\"\n            }, {\n                status: 404\n            });\n        }\n        // 각 메시지 내용 간략히 로깅\n        conversation.messages.forEach((msg, idx)=>{\n            console.log(`Message #${idx + 1} (${msg.role}): ${msg.content.substring(0, 30)}... (${msg.content.length} chars)`);\n        });\n        // Obsidian Vault 경로 확인\n        const vaultPath = process.env.OBSIDIAN_VAULT_PATH;\n        console.log(`Using Obsidian vault path: ${vaultPath}`);\n        if (!vaultPath) {\n            console.error(\"Obsidian Vault path is not configured\");\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Obsidian Vault 경로가 설정되지 않았습니다.\"\n            }, {\n                status: 500\n            });\n        }\n        try {\n            // 고유 ID 생성\n            const id = conversation.id || `${Date.now()}-${(0,uuid__WEBPACK_IMPORTED_MODULE_4__[\"default\"])().substring(0, 8)}`;\n            // 파일명 생성 (제목을 파일명으로 변환)\n            const fileName = conversation.title.toLowerCase().replace(/[^a-z0-9가-힣]/g, \"-\").replace(/-+/g, \"-\").replace(/^-|-$/g, \"\").substring(0, 100) // 길이 제한\n             + \".md\";\n            // 옵시디언 ChatGPT 폴더 경로\n            const obsidianFolder = path__WEBPACK_IMPORTED_MODULE_3__.join(vaultPath, \"ChatGPT\");\n            // 폴더 생성 (없는 경우)\n            await fs_promises__WEBPACK_IMPORTED_MODULE_2__.mkdir(obsidianFolder, {\n                recursive: true\n            });\n            // YAML 프론트매터 생성\n            const frontmatter = `---\ntitle: ${conversation.title}\ndate: ${new Date().toLocaleString(\"ko-KR\")}\nsource: ${url}\ntags: ${conversation.metadata?.model || \"ChatGPT\"}\n---\n\n`;\n            // 대화 내용을 마크다운으로 변환\n            let markdownContent = frontmatter;\n            // 대화 내용 추가\n            markdownContent += `# ${conversation.title}\\n\\n`;\n            // URL과 날짜 정보 추가\n            markdownContent += `> [원본 URL](${url})\\n\\n`;\n            markdownContent += `> 저장 시간: ${new Date().toLocaleString(\"ko-KR\")}\\n\\n`;\n            if (conversation.metadata?.model) {\n                markdownContent += `> 태그: ${conversation.metadata.model}\\n\\n`;\n            }\n            markdownContent += `---\\n\\n`;\n            // 사용자-어시스턴트 대화 내용을 마크다운으로 포맷팅 (JSON 스타일로 변경)\n            conversation.messages.forEach((message, index)=>{\n                const isUser = message.role === \"user\";\n                const messageHeader = isUser ? \"## \\uD83D\\uDC64 사용자\" : \"## \\uD83E\\uDD16 assistant\";\n                // JSON 형식처럼 역할과 내용을 구분하여 표시\n                markdownContent += `${messageHeader}\\n\\n${message.content}\\n\\n`;\n                // 마지막 메시지가 아니면 구분선 추가\n                if (index < conversation.messages.length - 1) {\n                    markdownContent += `---\\n\\n`;\n                }\n            });\n            // 옵시디언에 마크다운 파일 저장\n            const obsidianFilePath = path__WEBPACK_IMPORTED_MODULE_3__.join(obsidianFolder, fileName);\n            await fs_promises__WEBPACK_IMPORTED_MODULE_2__.writeFile(obsidianFilePath, markdownContent, \"utf-8\");\n            console.log(`Saved markdown content to: ${obsidianFilePath}`);\n            // 원본 텍스트 내용 저장 (HTML 대신)\n            const textFileName = fileName.replace(\".md\", \"-original.txt\");\n            const textFilePath = path__WEBPACK_IMPORTED_MODULE_3__.join(obsidianFolder, textFileName);\n            await fs_promises__WEBPACK_IMPORTED_MODULE_2__.writeFile(textFilePath, rawText, \"utf-8\");\n            console.log(`Saved original text content to: ${textFilePath}`);\n            // 로컬 JSON 파일로 저장 (대화 데이터만)\n            const conversationsDir = path__WEBPACK_IMPORTED_MODULE_3__.join(process.cwd(), \"conversations\");\n            // 폴더 생성 (없는 경우)\n            await fs_promises__WEBPACK_IMPORTED_MODULE_2__.mkdir(conversationsDir, {\n                recursive: true\n            });\n            // 대화 데이터 생성 (conversations 폴더에 저장되는 형식)\n            const conversationData = {\n                id,\n                title: conversation.title,\n                content: conversation.messages,\n                metadata: {\n                    date: new Date().toISOString(),\n                    model: conversation.metadata?.model || \"gpt-4\",\n                    tags: []\n                },\n                createdAt: new Date().toISOString(),\n                url\n            };\n            // JSON 파일로 저장\n            const jsonFilePath = path__WEBPACK_IMPORTED_MODULE_3__.join(conversationsDir, `${id}.json`);\n            await fs_promises__WEBPACK_IMPORTED_MODULE_2__.writeFile(jsonFilePath, JSON.stringify(conversationData, null, 2), \"utf-8\");\n            console.log(`Saved conversation data to: ${jsonFilePath}`);\n            // 성공 응답\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: true,\n                data: {\n                    conversation: conversationData,\n                    obsidian: {\n                        path: vaultPath,\n                        fileName,\n                        filePath: obsidianFilePath,\n                        textPath: textFilePath,\n                        contentType: \"markdown-formatted\"\n                    },\n                    jsonBackup: jsonFilePath\n                }\n            });\n        } catch (saveError) {\n            console.error(\"Error saving data:\", saveError);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: saveError instanceof Error ? saveError.message : \"데이터 저장 중 오류가 발생했습니다.\"\n            }, {\n                status: 500\n            });\n        }\n    } catch (error) {\n        console.error(\"Error processing conversation:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: error instanceof Error ? error.message : \"대화 처리 중 오류가 발생했습니다.\"\n        }, {\n            status: 500\n        });\n    }\n}\n/**\n * ChatGPT URL 유효성 검사\n */ function isValidChatGPTUrl(url) {\n    try {\n        const parsed = new URL(url);\n        // 도메인 체크\n        const validDomains = [\n            \"chat.openai.com\",\n            \"chatgpt.com\"\n        ];\n        if (!validDomains.some((domain)=>parsed.hostname.includes(domain))) {\n            return false;\n        }\n        // 경로 체크\n        return parsed.pathname.includes(\"/share/\") || parsed.pathname.includes(\"/c/\");\n    } catch (error) {\n        return false;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/conversations/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/utils/chatgpt.ts":
/*!**********************************!*\
  !*** ./src/lib/utils/chatgpt.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseChatGPTLink: () => (/* binding */ parseChatGPTLink)\n/* harmony export */ });\n/* harmony import */ var playwright__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! playwright */ \"playwright\");\n/* harmony import */ var playwright__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(playwright__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/types */ \"(rsc)/./src/types.ts\");\n\n\n/**\n * 주어진 ChatGPT 대화 URL에서 대화 내용과 전체 페이지 내용을 스크래핑하는 함수\n */ async function parseChatGPTLink(url) {\n    console.log(`Scraping ChatGPT conversation from URL: ${url}`);\n    let browser = null;\n    try {\n        // Chromium 브라우저 시작 (headless 모드)\n        browser = await playwright__WEBPACK_IMPORTED_MODULE_0__.chromium.launch({\n            headless: true,\n            args: [\n                \"--disable-web-security\",\n                \"--disable-features=IsolateOrigins,site-per-process\",\n                \"--no-sandbox\"\n            ],\n            timeout: 60000\n        });\n        // 브라우저 컨텍스트 및 페이지 생성\n        const context = await browser.newContext({\n            userAgent: \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36\",\n            viewport: {\n                width: 1280,\n                height: 800\n            },\n            ignoreHTTPSErrors: true\n        });\n        const page = await context.newPage();\n        // 페이지 로드 시도 (여러 번 시도)\n        let maxRetries = 3;\n        let loaded = false;\n        for(let attempt = 1; attempt <= maxRetries; attempt++){\n            try {\n                console.log(`Loading page attempt ${attempt}/${maxRetries}...`);\n                // 모든 리소스를 로드하도록 설정\n                await page.goto(url, {\n                    timeout: 30000,\n                    waitUntil: \"networkidle\" // 모든 리소스가 로드될 때까지 대기\n                });\n                loaded = true;\n                break;\n            } catch (navigationError) {\n                console.error(`Navigation error on attempt ${attempt}:`, navigationError);\n                // 마지막 시도가 아니면 잠시 대기 후 재시도\n                if (attempt < maxRetries) {\n                    await new Promise((resolve)=>setTimeout(resolve, 2000));\n                } else {\n                    throw new Error(`페이지 로드에 실패했습니다: ${navigationError instanceof Error ? navigationError.message : String(navigationError)}`);\n                }\n            }\n        }\n        if (!loaded) {\n            throw new Error(\"페이지 로드에 실패했습니다.\");\n        }\n        console.log(\"Page loaded successfully.\");\n        // 로그인 필요 여부 검사\n        if (url.includes(\"/share/\")) {\n            console.log(\"Shared URL detected, skipping login check\");\n        } else {\n            const isActualLoginPage = await page.evaluate(()=>{\n                return window.location.href.includes(\"/login\") || window.location.href.includes(\"auth0.openai.com\") || window.location.pathname === \"/auth/login\";\n            });\n            if (isActualLoginPage) {\n                console.log(\"Login page detected.\");\n                throw new Error(\"로그인이 필요한 페이지입니다. ChatGPT에 로그인 후 다시 시도해주세요.\");\n            }\n        }\n        // 페이지 내용이 충분히 로드될 때까지 추가 대기\n        await page.waitForTimeout(3000);\n        // 스크린샷 캡처 (디버깅용)\n        await page.screenshot({\n            path: \"chatgpt-capture.png\"\n        });\n        console.log(\"Screenshot saved to chatgpt-capture.png\");\n        // 전체 페이지 HTML 가져오기 - 모든 구조 그대로 유지\n        const rawHtml = await page.content();\n        // 페이지 텍스트 콘텐츠 가져오기\n        const rawText = await page.evaluate(()=>document.body.innerText);\n        // 대화 내용 추출 (메시지 구조화)\n        console.log(\"Extracting conversation data...\");\n        const conversationData = await extractConversationData(page);\n        // 대화 객체 생성\n        const conversation = {\n            id: extractConversationId(url),\n            title: conversationData.title,\n            messages: conversationData.messages,\n            createdAt: new Date().toISOString(),\n            source: _types__WEBPACK_IMPORTED_MODULE_1__.ChatSource.CHATGPT,\n            metadata: conversationData.metadata\n        };\n        // 빈 대화인지 확인\n        if (conversation.messages.length === 0) {\n            throw new Error(\"대화 내용을 추출할 수 없습니다.\");\n        }\n        console.log(`Extracted conversation: \"${conversation.title}\" with ${conversation.messages.length} messages`);\n        return {\n            conversation,\n            rawHtml,\n            rawText\n        };\n    } catch (error) {\n        console.error(\"Error during conversation extraction:\", error);\n        throw error instanceof Error ? error : new Error(`대화 추출 중 오류 발생: ${String(error)}`);\n    } finally{\n        // 브라우저 종료 - 리소스 정리\n        if (browser) {\n            await browser.close();\n            console.log(\"Browser closed.\");\n        }\n    }\n}\n/**\n * URL에서 대화 ID를 추출하는 헬퍼 함수\n */ function extractConversationId(url) {\n    const urlSegments = url.split(\"/\");\n    const potentialId = urlSegments.pop() || \"\";\n    // ID가 유효한지 확인 (공유 URL의 ID 형식은 다를 수 있음)\n    if (potentialId && potentialId.length > 5) {\n        return potentialId;\n    }\n    // 대체 ID 생성\n    return `${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n}\n/**\n * 페이지에서 대화 데이터를 추출하는 함수\n */ async function extractConversationData(page) {\n    return await page.evaluate(()=>{\n        console.log(\"Starting conversation extraction...\");\n        // 제목 추출 (여러 방법 시도)\n        let title = \"\";\n        // 1. h1 태그에서 제목 찾기\n        const h1Element = document.querySelector(\"h1\");\n        if (h1Element && h1Element.textContent) {\n            title = h1Element.textContent.trim();\n        }\n        // 2. 페이지 타이틀에서 제목 찾기\n        if (!title) {\n            const titleElement = document.querySelector(\"title\");\n            if (titleElement && titleElement.textContent) {\n                title = titleElement.textContent.replace(\" - ChatGPT\", \"\").replace(\" - OpenAI\", \"\").trim();\n            }\n        }\n        // 3. 메타 데이터에서 제목 찾기\n        if (!title) {\n            const metaTitle = document.querySelector('meta[property=\"og:title\"]');\n            if (metaTitle) {\n                const content = metaTitle.getAttribute(\"content\");\n                if (content) {\n                    title = content.trim();\n                }\n            }\n        }\n        // 제목을 찾지 못한 경우 기본값 사용\n        if (!title) {\n            title = \"ChatGPT Conversation \" + new Date().toLocaleString();\n        }\n        console.log(`Title extracted: ${title}`);\n        // 페이지 전체에서 모든 대화 요소 직접 추출 시도\n        // 1. assistant 메시지 찾기\n        const assistantElements = document.querySelectorAll('[data-message-author-role=\"assistant\"]');\n        console.log(`[DEBUG] Found ${assistantElements.length} assistant elements by attribute`);\n        // 2. user 메시지 찾기 (여러 방법 시도)\n        // 명시적인 user 역할 속성 찾기\n        const userByAttrElements = document.querySelectorAll('[data-message-author-role=\"user\"]');\n        console.log(`[DEBUG] Found ${userByAttrElements.length} user elements by attribute`);\n        // 대안: 특정 클래스와 위치로 user 메시지 추론\n        let userElements = [];\n        // 대화 메시지를 저장할 배열\n        let messages = [];\n        if (userByAttrElements.length === 0) {\n            // 여러 가능한 사용자 메시지 컨테이너 선택자 시도\n            for (const selector of [\n                \".whitespace-pre-wrap:not([data-message-author-role])\",\n                \".text-message:not([data-message-author-role])\",\n                '.chat-message[role=\"user\"]',\n                \".chat-message-user\",\n                \".message-user\",\n                \".human-message\"\n            ]){\n                const candidates = document.querySelectorAll(selector);\n                console.log(`[DEBUG] Found ${candidates.length} potential user elements with selector: ${selector}`);\n                if (candidates.length > 0) {\n                    userElements = Array.from(candidates);\n                    break;\n                }\n            }\n        } else {\n            userElements = Array.from(userByAttrElements);\n        }\n        console.log(`[DEBUG] Total user elements: ${userElements.length}`);\n        // 대화 수집\n        if (assistantElements.length > 0 && userElements.length > 0) {\n            // HTML 구조에서 모든 대화 요소 수집 및 순서 결정\n            const conversationElements = [];\n            // 어시스턴트 메시지 추가\n            Array.from(assistantElements).forEach((el)=>{\n                conversationElements.push({\n                    element: el,\n                    role: \"assistant\",\n                    position: getPositionInDocument(el)\n                });\n            });\n            // 사용자 메시지 추가\n            userElements.forEach((el)=>{\n                conversationElements.push({\n                    element: el,\n                    role: \"user\",\n                    position: getPositionInDocument(el)\n                });\n            });\n            // DOM 순서대로 정렬\n            conversationElements.sort((a, b)=>a.position - b.position);\n            console.log(`[DEBUG] Sorted conversation elements: ${conversationElements.length}`);\n            console.log(`[DEBUG] First few roles: ${conversationElements.slice(0, 3).map((e)=>e.role).join(\", \")}`);\n            // 정렬된 요소에서 대화 내용 추출\n            const extractedMessages = [];\n            for (const item of conversationElements){\n                const content = item.element.textContent?.trim() || \"\";\n                if (content && content.length > 0) {\n                    // 일부 UI 요소 제외\n                    if (!content.includes(\"Skip to content\") && !content.includes(\"Log in\") && !content.includes(\"Sign up\")) {\n                        extractedMessages.push({\n                            role: item.role,\n                            content\n                        });\n                    }\n                }\n            }\n            console.log(`[DEBUG] Extracted ${extractedMessages.length} messages`);\n            if (extractedMessages.length > 0) {\n                console.log(`[DEBUG] First message role: ${extractedMessages[0].role}`);\n                console.log(`[DEBUG] First message preview: ${extractedMessages[0].content.substring(0, 30)}...`);\n            }\n            // 최소한 하나의 사용자와 어시스턴트 메시지가 있는지 확인\n            const hasUser = extractedMessages.some((m)=>m.role === \"user\");\n            const hasAssistant = extractedMessages.some((m)=>m.role === \"assistant\");\n            if (hasUser && hasAssistant && extractedMessages.length >= 2) {\n                console.log(`[DEBUG] Found valid conversation with ${extractedMessages.length} messages`);\n                messages = extractedMessages;\n            } else {\n                console.log(`[DEBUG] Extracted messages don't form a valid conversation (user: ${hasUser}, assistant: ${hasAssistant})`);\n            }\n        }\n        // 페이지에서 요소의 위치를 결정하는 함수\n        function getPositionInDocument(element) {\n            // 요소의 부모들을 모두 찾아서 깊이 계산\n            let depth = 0;\n            let parent = element.parentElement;\n            while(parent){\n                depth++;\n                parent = parent.parentElement;\n            }\n            // DOM에서의 순서를 계산 (형제 요소 중 위치)\n            let siblingPosition = 0;\n            let sibling = element.previousElementSibling;\n            while(sibling){\n                siblingPosition++;\n                sibling = sibling.previousElementSibling;\n            }\n            // 요소의 대략적인 Y 위치를 반환 (if available)\n            const rect = element.getBoundingClientRect();\n            const yPosition = rect ? rect.top : 0;\n            // 깊이, 형제 위치, Y위치를 조합하여 최종 위치 반환\n            return yPosition + siblingPosition * 10000 + depth * 1000000;\n        }\n        // 메시지가 없으면 기본 오류 메시지 추가\n        if (messages.length === 0) {\n            // 최후의 방법: 페이지에서 이전/다음 메시지 패턴 찾기\n            try {\n                // 일반적인 사용자 입력 패턴 (최소 3개 이상의 단어를 가진 문단)\n                const potentialUserMessages = Array.from(document.querySelectorAll(\"p, div, span\")).map((el)=>el.textContent?.trim() || \"\").filter((text)=>text && text.split(\" \").length >= 3 && text.length > 20).filter((text)=>!text.includes(\"ChatGPT\") && !text.includes(\"Log in\") && !text.includes(\"Sign up\"));\n                if (potentialUserMessages.length > 0) {\n                    // 첫 번째 메시지를 사용자 메시지로 추가\n                    const userMessage = potentialUserMessages[0];\n                    messages.push({\n                        role: \"user\",\n                        content: userMessage\n                    });\n                    // 나머지 텍스트를 어시스턴트 응답으로 추가\n                    const remainingText = document.body.innerText.replace(title, \"\").replace(userMessage, \"\").replace(/Log in|Sign up|Attach|Search|Reason|Voice|By messaging ChatGPT|Skip to content|ChatGPT/g, \"\").replace(/window\\.__oai_.*?;/g, \"\").trim();\n                    if (remainingText.length > 0) {\n                        messages.push({\n                            role: \"assistant\",\n                            content: remainingText\n                        });\n                    }\n                } else {\n                    messages.push({\n                        role: \"assistant\",\n                        content: \"대화 내용을 추출할 수 없습니다. ChatGPT 공유 링크가 유효한지 확인해주세요.\"\n                    });\n                }\n            } catch (error) {\n                messages.push({\n                    role: \"assistant\",\n                    content: \"대화 내용을 추출할 수 없습니다. ChatGPT 공유 링크가 유효한지 확인해주세요.\"\n                });\n            }\n        }\n        // 대화형 구조 확인 - 먼저 유저 메시지로 시작하는지 확인\n        if (messages.length > 0 && messages[0].role !== \"user\") {\n            // ChatGPT 대화는 항상 사용자 질문으로 시작해야 함\n            // 대화가 어시스턴트로 시작하면 첫 메시지를 사용자 메시지로 변경\n            console.log(\"첫 메시지가 사용자 메시지가 아닙니다. 대화 구조를 수정합니다.\");\n            // 새 대화 구조 생성\n            const alternatingMessages = [];\n            // 첫 번째 메시지가 assistant인 경우, 가짜 user 메시지를 추가하고 시작\n            alternatingMessages.push({\n                role: \"user\",\n                content: \"대화를 시작합니다.\"\n            });\n            // 기존 메시지 복사\n            messages.forEach((msg)=>{\n                alternatingMessages.push(msg);\n            });\n            // 수정된 메시지로 교체\n            messages = alternatingMessages;\n        }\n        // 올바른 대화 구조 확인 (user와 assistant가 번갈아 나타나야 함)\n        const correctedMessages = [];\n        let expectedRole = \"user\"; // 대화는 user로 시작해야 함\n        messages.forEach((msg, index)=>{\n            if (index === 0 && msg.role !== \"user\") {\n                // 첫 메시지는 항상 사용자여야 함\n                correctedMessages.push({\n                    role: \"user\",\n                    content: \"대화를 시작합니다.\"\n                });\n                expectedRole = \"assistant\";\n            }\n            if (msg.role === expectedRole) {\n                // 역할이 예상대로인 경우 그대로 추가\n                correctedMessages.push(msg);\n                // 다음 예상 역할 전환\n                expectedRole = expectedRole === \"user\" ? \"assistant\" : \"user\";\n            } else {\n                // 같은 역할이 연속으로 나타나는 경우, 빈 메시지를 중간에 삽입\n                if (expectedRole === \"user\") {\n                    correctedMessages.push({\n                        role: \"user\",\n                        content: \"(계속)\"\n                    });\n                } else {\n                    correctedMessages.push({\n                        role: \"assistant\",\n                        content: \"(계속)\"\n                    });\n                }\n                // 현재 메시지 추가\n                correctedMessages.push(msg);\n                // 다음 예상 역할 설정\n                expectedRole = msg.role === \"user\" ? \"assistant\" : \"user\";\n            }\n        });\n        // 수정된 메시지로 교체\n        messages = correctedMessages;\n        // GPT-4 모델인지 확인\n        const isGPT4 = document.body.innerText.includes(\"GPT-4\") || document.body.innerText.includes(\"gpt-4\") || document.querySelector('img[alt*=\"GPT-4\"]') !== null;\n        return {\n            title,\n            messages,\n            metadata: {\n                date: new Date().toISOString(),\n                model: isGPT4 ? \"gpt-4\" : \"gpt-3.5-turbo\",\n                tags: []\n            }\n        };\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/utils/chatgpt.ts\n");

/***/ }),

/***/ "(rsc)/./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatSource: () => (/* binding */ ChatSource)\n/* harmony export */ });\nvar ChatSource;\n(function(ChatSource) {\n    ChatSource[\"CHATGPT\"] = \"chatgpt\";\n    ChatSource[\"USER_INPUT\"] = \"user_input\";\n    ChatSource[\"API\"] = \"api\";\n})(ChatSource || (ChatSource = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvdHlwZXMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7VUFBWUE7Ozs7R0FBQUEsZUFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wa20tcHJvamVjdC8uL3NyYy90eXBlcy50cz8yNjljIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIENoYXRTb3VyY2Uge1xyXG4gIENIQVRHUFQgPSAnY2hhdGdwdCcsXHJcbiAgVVNFUl9JTlBVVCA9ICd1c2VyX2lucHV0JyxcclxuICBBUEkgPSAnYXBpJyxcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDaGF0TWVzc2FnZSB7XHJcbiAgcm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCcgfCAnc3lzdGVtJztcclxuICBjb250ZW50OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29udmVyc2F0aW9uIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgbWVzc2FnZXM6IENoYXRNZXNzYWdlW107XHJcbiAgY3JlYXRlZEF0OiBEYXRlIHwgc3RyaW5nO1xyXG4gIHNvdXJjZTogQ2hhdFNvdXJjZTtcclxuICB0YWdzPzogc3RyaW5nW107XHJcbiAgbWV0YWRhdGE/OiB7XHJcbiAgICBkYXRlOiBzdHJpbmc7XHJcbiAgICBtb2RlbDogc3RyaW5nO1xyXG4gICAgdGFnczogc3RyaW5nW107XHJcbiAgfTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb252ZXJzYXRpb25TdW1tYXJ5IHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgc3VtbWFyeTogc3RyaW5nO1xyXG4gIGNyZWF0ZWRBdDogc3RyaW5nO1xyXG4gIHNvdXJjZTogQ2hhdFNvdXJjZTtcclxuICB0YWdzPzogc3RyaW5nW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2V0dGluZ3Mge1xyXG4gIG9ic2lkaWFuVmF1bHRQYXRoOiBzdHJpbmc7XHJcbiAgb3BlbmFpQXBpS2V5OiBzdHJpbmc7XHJcbiAgZGVmYXVsdFRhZ3M6IHN0cmluZ1tdO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBBcGlSZXNwb25zZTxUPiA9IHtcclxuICBzdWNjZXNzOiBib29sZWFuO1xyXG4gIGRhdGE/OiBUO1xyXG4gIGVycm9yPzogc3RyaW5nO1xyXG59OyAiXSwibmFtZXMiOlsiQ2hhdFNvdXJjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/types.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/uuid"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fconversations%2Froute&page=%2Fapi%2Fconversations%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fconversations%2Froute.ts&appDir=C%3A%5CpmkProject%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CpmkProject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();