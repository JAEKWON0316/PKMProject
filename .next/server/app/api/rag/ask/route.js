"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/rag/ask/route";
exports.ids = ["app/api/rag/ask/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frag%2Fask%2Froute&page=%2Fapi%2Frag%2Fask%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frag%2Fask%2Froute.ts&appDir=C%3A%5CpmkProject%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CpmkProject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":
/*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frag%2Fask%2Froute&page=%2Fapi%2Frag%2Fask%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frag%2Fask%2Froute.ts&appDir=C%3A%5CpmkProject%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CpmkProject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_pmkProject_src_app_api_rag_ask_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/rag/ask/route.ts */ \"(rsc)/./src/app/api/rag/ask/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/rag/ask/route\",\n        pathname: \"/api/rag/ask\",\n        filename: \"route\",\n        bundlePath: \"app/api/rag/ask/route\"\n    },\n    resolvedPagePath: \"C:\\\\pmkProject\\\\src\\\\app\\\\api\\\\rag\\\\ask\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_pmkProject_src_app_api_rag_ask_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/rag/ask/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZyYWclMkZhc2slMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnJhZyUyRmFzayUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnJhZyUyRmFzayUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDcG1rUHJvamVjdCU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q3Bta1Byb2plY3QmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9c3RhbmRhbG9uZSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ0M7QUFDOUU7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1R0FBdUc7QUFDL0c7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUM2Sjs7QUFFN0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wa20tcHJvamVjdC8/YTJmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxwbWtQcm9qZWN0XFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHJhZ1xcXFxhc2tcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwic3RhbmRhbG9uZVwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9yYWcvYXNrL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcmFnL2Fza1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcmFnL2Fzay9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXHBta1Byb2plY3RcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxccmFnXFxcXGFza1xcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9yYWcvYXNrL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frag%2Fask%2Froute&page=%2Fapi%2Frag%2Fask%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frag%2Fask%2Froute.ts&appDir=C%3A%5CpmkProject%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CpmkProject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/rag/ask/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/rag/ask/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _utils_langchain__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/langchain */ \"(rsc)/./src/utils/langchain.ts\");\n\n\n/**\r\n * RAG 기반 질의응답 API\r\n * 사용자 질문을 받아 관련 컨텍스트를 검색하고 응답을 생성합니다.\r\n */ async function POST(request) {\n    try {\n        const body = await request.json().catch((e)=>{\n            console.error(\"요청 본문 파싱 실패:\", e);\n            return null;\n        });\n        if (!body || !body.query) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"질문이 필요합니다.\"\n            }, {\n                status: 400\n            });\n        }\n        const { query, similarity = 0.7, limit = 5 } = body;\n        console.log(`RAG 질의 처리: \"${query}\"`);\n        // RAG 응답 생성\n        try {\n            const response = await (0,_utils_langchain__WEBPACK_IMPORTED_MODULE_1__.generateRagResponse)(query, similarity, limit);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: true,\n                data: response\n            });\n        } catch (ragError) {\n            console.error(\"RAG 응답 생성 오류:\", ragError);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: ragError instanceof Error ? ragError.message : \"응답을 생성할 수 없습니다.\"\n            }, {\n                status: 422\n            });\n        }\n    } catch (error) {\n        console.error(\"질의 처리 오류:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: error instanceof Error ? error.message : \"처리 중 오류가 발생했습니다.\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9yYWcvYXNrL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQztBQUNhO0FBRXhEOzs7Q0FHQyxHQUNNLGVBQWVFLEtBQUtDLE9BQWdCO0lBQ3pDLElBQUk7UUFDRixNQUFNQyxPQUFPLE1BQU1ELFFBQVFFLElBQUksR0FBR0MsS0FBSyxDQUFDQyxDQUFBQTtZQUN0Q0MsUUFBUUMsS0FBSyxDQUFDLGdCQUFnQkY7WUFDOUIsT0FBTztRQUNUO1FBRUEsSUFBSSxDQUFDSCxRQUFRLENBQUNBLEtBQUtNLEtBQUssRUFBRTtZQUN4QixPQUFPVixrRkFBWUEsQ0FBQ0ssSUFBSSxDQUN0QjtnQkFBRU0sU0FBUztnQkFBT0YsT0FBTztZQUFhLEdBQ3RDO2dCQUFFRyxRQUFRO1lBQUk7UUFFbEI7UUFFQSxNQUFNLEVBQUVGLEtBQUssRUFBRUcsYUFBYSxHQUFHLEVBQUVDLFFBQVEsQ0FBQyxFQUFFLEdBQUdWO1FBQy9DSSxRQUFRTyxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUVMLE1BQU0sQ0FBQyxDQUFDO1FBRW5DLFlBQVk7UUFDWixJQUFJO1lBQ0YsTUFBTU0sV0FBVyxNQUFNZixxRUFBbUJBLENBQUNTLE9BQU9HLFlBQVlDO1lBRTlELE9BQU9kLGtGQUFZQSxDQUFDSyxJQUFJLENBQUM7Z0JBQ3ZCTSxTQUFTO2dCQUNUTSxNQUFNRDtZQUNSO1FBQ0YsRUFBRSxPQUFPRSxVQUFVO1lBQ2pCVixRQUFRQyxLQUFLLENBQUMsaUJBQWlCUztZQUUvQixPQUFPbEIsa0ZBQVlBLENBQUNLLElBQUksQ0FDdEI7Z0JBQ0VNLFNBQVM7Z0JBQ1RGLE9BQU9TLG9CQUFvQkMsUUFBUUQsU0FBU0UsT0FBTyxHQUFHO1lBQ3hELEdBQ0E7Z0JBQUVSLFFBQVE7WUFBSTtRQUVsQjtJQUNGLEVBQUUsT0FBT0gsT0FBTztRQUNkRCxRQUFRQyxLQUFLLENBQUMsYUFBYUE7UUFFM0IsT0FBT1Qsa0ZBQVlBLENBQUNLLElBQUksQ0FDdEI7WUFDRU0sU0FBUztZQUNURixPQUFPQSxpQkFBaUJVLFFBQVFWLE1BQU1XLE9BQU8sR0FBRztRQUNsRCxHQUNBO1lBQUVSLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGttLXByb2plY3QvLi9zcmMvYXBwL2FwaS9yYWcvYXNrL3JvdXRlLnRzPzI4MGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xyXG5pbXBvcnQgeyBnZW5lcmF0ZVJhZ1Jlc3BvbnNlIH0gZnJvbSAnQC91dGlscy9sYW5nY2hhaW4nO1xyXG5cclxuLyoqXHJcbiAqIFJBRyDquLDrsJgg7KeI7J2Y7J2R64u1IEFQSVxyXG4gKiDsgqzsmqnsnpAg7KeI66y47J2EIOuwm+yVhCDqtIDroKgg7Luo7YWN7Iqk7Yq466W8IOqygOyDie2VmOqzoCDsnZHri7XsnYQg7IOd7ISx7ZWp64uI64ukLlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogUmVxdWVzdCk6IFByb21pc2U8UmVzcG9uc2U+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpLmNhdGNoKGUgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfsmpTssq0g67O466y4IO2MjOyLsSDsi6TtjKg6JywgZSk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGlmICghYm9keSB8fCAhYm9keS5xdWVyeSkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgICAgeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICfsp4jrrLjsnbQg7ZWE7JqU7ZWp64uI64ukLicgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAwIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29uc3QgeyBxdWVyeSwgc2ltaWxhcml0eSA9IDAuNywgbGltaXQgPSA1IH0gPSBib2R5O1xyXG4gICAgY29uc29sZS5sb2coYFJBRyDsp4jsnZgg7LKY66asOiBcIiR7cXVlcnl9XCJgKTtcclxuICAgIFxyXG4gICAgLy8gUkFHIOydkeuLtSDsg53shLFcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZ2VuZXJhdGVSYWdSZXNwb25zZShxdWVyeSwgc2ltaWxhcml0eSwgbGltaXQpO1xyXG4gICAgICBcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHtcclxuICAgICAgICBzdWNjZXNzOiB0cnVlLFxyXG4gICAgICAgIGRhdGE6IHJlc3BvbnNlXHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAocmFnRXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignUkFHIOydkeuLtSDsg53shLEg7Jik66WYOicsIHJhZ0Vycm9yKTtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7IFxyXG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsIFxyXG4gICAgICAgICAgZXJyb3I6IHJhZ0Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyByYWdFcnJvci5tZXNzYWdlIDogJ+ydkeuLteydhCDsg53shLHtlaAg7IiYIOyXhuyKteuLiOuLpC4nIFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDQyMiB9XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ+yniOydmCDsspjrpqwg7Jik66WYOicsIGVycm9yKTtcclxuICAgIFxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICB7IFxyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcclxuICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAn7LKY66asIOykkSDsmKTrpZjqsIAg67Cc7IOd7ZaI7Iq164uI64ukLicgXHJcbiAgICAgIH0sXHJcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxyXG4gICAgKTtcclxuICB9XHJcbn0gIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsImdlbmVyYXRlUmFnUmVzcG9uc2UiLCJQT1NUIiwicmVxdWVzdCIsImJvZHkiLCJqc29uIiwiY2F0Y2giLCJlIiwiY29uc29sZSIsImVycm9yIiwicXVlcnkiLCJzdWNjZXNzIiwic3RhdHVzIiwic2ltaWxhcml0eSIsImxpbWl0IiwibG9nIiwicmVzcG9uc2UiLCJkYXRhIiwicmFnRXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/rag/ask/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getClientSupabase: () => (/* binding */ getClientSupabase),\n/* harmony export */   getServerSupabase: () => (/* binding */ getServerSupabase),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin),\n/* harmony export */   supabaseClient: () => (/* binding */ supabaseClient),\n/* harmony export */   testSupabaseConnection: () => (/* binding */ testSupabaseConnection)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Supabase Client\nconst supabaseUrl = \"https://ghtqqcoyakjozzhegktl.supabase.co\" || 0;\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY || \"\";\n// 서비스 키를 사용한 클라이언트 (백엔드 전용) - RLS 우회\nconst supabaseAdmin = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey);\n// 익명 키를 사용한 클라이언트 (프론트엔드 안전)\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdodHFxY295YWtqb=\\\"\\\"3p6aGVna3RsIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NjA4NjkwMywiZXhwIjoyMDYxNjYyOTAzfQ.3Ygn7Ql9okDXtYnTblDXKLg2wXge1tHhm5Zok_N283k\" || 0;\nconst supabaseClient = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n/**\r\n * 백엔드 API에서 사용할 Supabase 클라이언트 인스턴스를 반환합니다.\r\n * RLS 정책을 우회할 수 있는 서비스 키를 사용합니다.\r\n */ function getServerSupabase() {\n    return supabaseAdmin;\n}\n/**\r\n * 브라우저에서 사용할 Supabase 클라이언트 인스턴스를 반환합니다.\r\n * RLS 정책이 적용된 익명 키를 사용합니다.\r\n */ function getClientSupabase() {\n    return supabaseClient;\n}\n// Supabase 연결 테스트 함수\nasync function testSupabaseConnection() {\n    try {\n        // 환경 변수만 확인\n        if (!supabaseUrl) {\n            throw new Error(\"Supabase URL이 설정되지 않았습니다\");\n        }\n        if (!supabaseServiceKey) {\n            throw new Error(\"Supabase 서비스 키가 설정되지 않았습니다\");\n        }\n        if (!supabaseAnonKey) {\n            throw new Error(\"Supabase 익명 키가 설정되지 않았습니다\");\n        }\n        return {\n            success: true,\n            message: \"Supabase 환경 변수 확인 완료, 마이그레이션을 진행합니다.\"\n        };\n    } catch (error) {\n        console.error(\"Supabase 연결 테스트 오류:\", error);\n        return {\n            success: false,\n            message: error instanceof Error ? error.message : \"알 수 없는 오류\"\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3N1cGFiYXNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFxRDtBQUVyRCxrQkFBa0I7QUFDbEIsTUFBTUMsY0FBY0MsMENBQW9DLElBQUk7QUFDNUQsTUFBTUcscUJBQXFCSCxRQUFRQyxHQUFHLENBQUNHLG9CQUFvQixJQUFJO0FBRS9ELHFDQUFxQztBQUM5QixNQUFNQyxnQkFBZ0JQLG1FQUFZQSxDQUFDQyxhQUFhSSxvQkFBb0I7QUFFM0UsNkJBQTZCO0FBQzdCLE1BQU1HLGtCQUFrQk4sa09BQXlDLElBQUk7QUFDOUQsTUFBTVEsaUJBQWlCVixtRUFBWUEsQ0FBQ0MsYUFBYU8saUJBQWlCO0FBRXpFOzs7Q0FHQyxHQUNNLFNBQVNHO0lBQ2QsT0FBT0o7QUFDVDtBQUVBOzs7Q0FHQyxHQUNNLFNBQVNLO0lBQ2QsT0FBT0Y7QUFDVDtBQUVBLHFCQUFxQjtBQUNkLGVBQWVHO0lBQ3BCLElBQUk7UUFDRixZQUFZO1FBQ1osSUFBSSxDQUFDWixhQUFhO1lBQ2hCLE1BQU0sSUFBSWEsTUFBTTtRQUNsQjtRQUVBLElBQUksQ0FBQ1Qsb0JBQW9CO1lBQ3ZCLE1BQU0sSUFBSVMsTUFBTTtRQUNsQjtRQUVBLElBQUksQ0FBQ04saUJBQWlCO1lBQ3BCLE1BQU0sSUFBSU0sTUFBTTtRQUNsQjtRQUVBLE9BQU87WUFDTEMsU0FBUztZQUNUQyxTQUFTO1FBQ1g7SUFDRixFQUFFLE9BQU9DLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLHVCQUF1QkE7UUFDckMsT0FBTztZQUNMRixTQUFTO1lBQ1RDLFNBQVNDLGlCQUFpQkgsUUFBUUcsTUFBTUQsT0FBTyxHQUFHO1FBQ3BEO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3BrbS1wcm9qZWN0Ly4vc3JjL2xpYi9zdXBhYmFzZS50cz8wNmUxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcyc7XHJcblxyXG4vLyBTdXBhYmFzZSBDbGllbnRcclxuY29uc3Qgc3VwYWJhc2VVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwgfHwgJyc7XHJcbmNvbnN0IHN1cGFiYXNlU2VydmljZUtleSA9IHByb2Nlc3MuZW52LlNVUEFCQVNFX1NFUlZJQ0VfS0VZIHx8ICcnO1xyXG5cclxuLy8g7ISc67mE7IqkIO2CpOulvCDsgqzsmqntlZwg7YG065287J207Ja47Yq4ICjrsLHsl5Trk5wg7KCE7JqpKSAtIFJMUyDsmrDtmoxcclxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlQWRtaW4gPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlU2VydmljZUtleSk7XHJcblxyXG4vLyDsnbXrqoUg7YKk66W8IOyCrOyaqe2VnCDtgbTrnbzsnbTslrjtirggKO2UhOuhoO2KuOyXlOuTnCDslYjsoIQpXHJcbmNvbnN0IHN1cGFiYXNlQW5vbktleSA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIHx8ICcnO1xyXG5leHBvcnQgY29uc3Qgc3VwYWJhc2VDbGllbnQgPSBjcmVhdGVDbGllbnQoc3VwYWJhc2VVcmwsIHN1cGFiYXNlQW5vbktleSk7XHJcblxyXG4vKipcclxuICog67Cx7JeU65OcIEFQSeyXkOyEnCDsgqzsmqntlaAgU3VwYWJhc2Ug7YG065287J207Ja47Yq4IOyduOyKpO2EtOyKpOulvCDrsJjtmZjtlanri4jri6QuXHJcbiAqIFJMUyDsoJXssYXsnYQg7Jqw7ZqM7ZWgIOyImCDsnojripQg7ISc67mE7IqkIO2CpOulvCDsgqzsmqntlanri4jri6QuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VydmVyU3VwYWJhc2UoKSB7XHJcbiAgcmV0dXJuIHN1cGFiYXNlQWRtaW47XHJcbn1cclxuXHJcbi8qKlxyXG4gKiDruIzrnbzsmrDsoIDsl5DshJwg7IKs7Jqp7ZWgIFN1cGFiYXNlIO2BtOudvOydtOyWuO2KuCDsnbjsiqTthLTsiqTrpbwg67CY7ZmY7ZWp64uI64ukLlxyXG4gKiBSTFMg7KCV7LGF7J20IOyggeyaqeuQnCDsnbXrqoUg7YKk66W8IOyCrOyaqe2VqeuLiOuLpC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDbGllbnRTdXBhYmFzZSgpIHtcclxuICByZXR1cm4gc3VwYWJhc2VDbGllbnQ7XHJcbn1cclxuXHJcbi8vIFN1cGFiYXNlIOyXsOqysCDthYzsiqTtirgg7ZWo7IiYXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0ZXN0U3VwYWJhc2VDb25uZWN0aW9uKCkge1xyXG4gIHRyeSB7XHJcbiAgICAvLyDtmZjqsr0g67OA7IiY66eMIO2ZleyduFxyXG4gICAgaWYgKCFzdXBhYmFzZVVybCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cGFiYXNlIFVSTOydtCDshKTsoJXrkJjsp4Ag7JWK7JWY7Iq164uI64ukJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICghc3VwYWJhc2VTZXJ2aWNlS2V5KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwYWJhc2Ug7ISc67mE7IqkIO2CpOqwgCDshKTsoJXrkJjsp4Ag7JWK7JWY7Iq164uI64ukJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICghc3VwYWJhc2VBbm9uS2V5KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3VwYWJhc2Ug7J2166qFIO2CpOqwgCDshKTsoJXrkJjsp4Ag7JWK7JWY7Iq164uI64ukJyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiB7IFxyXG4gICAgICBzdWNjZXNzOiB0cnVlLCBcclxuICAgICAgbWVzc2FnZTogJ1N1cGFiYXNlIO2ZmOqyvSDrs4DsiJgg7ZmV7J24IOyZhOujjCwg66eI7J206re466CI7J207IWY7J2EIOynhO2Wie2VqeuLiOuLpC4nIFxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignU3VwYWJhc2Ug7Jew6rKwIO2FjOyKpO2KuCDsmKTrpZg6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIHsgXHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLCBcclxuICAgICAgbWVzc2FnZTogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAn7JWMIOyImCDsl4bripQg7Jik66WYJyBcclxuICAgIH07XHJcbiAgfVxyXG59ICJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJzdXBhYmFzZVVybCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJzdXBhYmFzZVNlcnZpY2VLZXkiLCJTVVBBQkFTRV9TRVJWSUNFX0tFWSIsInN1cGFiYXNlQWRtaW4iLCJzdXBhYmFzZUFub25LZXkiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsInN1cGFiYXNlQ2xpZW50IiwiZ2V0U2VydmVyU3VwYWJhc2UiLCJnZXRDbGllbnRTdXBhYmFzZSIsInRlc3RTdXBhYmFzZUNvbm5lY3Rpb24iLCJFcnJvciIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwiZXJyb3IiLCJjb25zb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/supabase.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/embeddings.ts":
/*!*********************************!*\
  !*** ./src/utils/embeddings.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chunkMessages: () => (/* binding */ chunkMessages),\n/* harmony export */   getEmbedding: () => (/* binding */ getEmbedding),\n/* harmony export */   truncateText: () => (/* binding */ truncateText)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var gpt_tokenizer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gpt-tokenizer */ \"(rsc)/./node_modules/gpt-tokenizer/esm/main.js\");\n\n\n// OpenAI API 클라이언트 초기화\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n/**\r\n * 텍스트에서 유효하지 않은 문자를 제거합니다.\r\n * 특히 \\u0000(NULL) 문자와 기타 PostgreSQL에서 문제를 일으킬 수 있는 문자를 제거합니다.\r\n */ function sanitizeText(text) {\n    if (!text) return \"\";\n    // null 문자 및 제어 문자 제거\n    let sanitized = text.replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, \" \");\n    // PostgreSQL에서 문제가 될 수 있는 특수 이스케이프 시퀀스 처리\n    sanitized = sanitized.replace(/\\\\u0000/g, \"\");\n    // 연속된 공백 제거\n    sanitized = sanitized.replace(/\\s+/g, \" \");\n    return sanitized.trim();\n}\n/**\r\n * 텍스트에 대한 임베딩 벡터를 생성합니다.\r\n * @param text 임베딩할 텍스트\r\n * @returns 임베딩 벡터\r\n */ async function getEmbedding(text) {\n    try {\n        // 텍스트 정제\n        const sanitizedText = sanitizeText(text);\n        if (!sanitizedText) {\n            console.warn(\"임베딩 생성을 위한 텍스트가 비어있습니다.\");\n            // 빈 텍스트의 경우 기본 임베딩 값 반환 (모두 0)\n            return Array(1536).fill(0);\n        }\n        // 텍스트가 너무 짧은 경우 (1-2글자) 처리\n        if (sanitizedText.length < 3) {\n            console.warn(`임베딩 생성을 위한 텍스트가 너무 짧습니다: \"${sanitizedText}\"`);\n            // 짧은 텍스트 확장 (의미를 유지하면서 컨텍스트 추가)\n            const expandedText = `질문: ${sanitizedText} 에 대한 정보를 찾습니다.`;\n            console.log(`확장된 텍스트로 임베딩 생성: \"${expandedText}\"`);\n            const response = await openai.embeddings.create({\n                model: \"text-embedding-3-small\",\n                input: expandedText\n            });\n            return response.data[0].embedding;\n        }\n        // 일반적인 경우 임베딩 생성\n        const response = await openai.embeddings.create({\n            model: \"text-embedding-3-small\",\n            input: sanitizedText\n        });\n        return response.data[0].embedding;\n    } catch (error) {\n        console.error(\"임베딩 생성 중 오류:\", error);\n        // 오류 발생 시 재시도 (다른 모델 사용)\n        try {\n            console.log(\"대체 임베딩 모델로 재시도합니다.\");\n            const response = await openai.embeddings.create({\n                model: \"text-embedding-ada-002\",\n                input: sanitizeText(text) || \"빈 쿼리\"\n            });\n            return response.data[0].embedding;\n        } catch (retryError) {\n            console.error(\"대체 임베딩 생성 중 오류:\", retryError);\n            // 모든 시도 실패 시 기본 임베딩 반환\n            return Array(1536).fill(0);\n        }\n    }\n}\n/**\r\n * 토큰 제한에 맞게 텍스트를 자릅니다.\r\n * @param text 원본 텍스트\r\n * @param maxTokens 최대 토큰 수 (기본값 8000)\r\n * @returns 잘린 텍스트\r\n */ function truncateText(text, maxTokens = 8000) {\n    const tokens = (0,gpt_tokenizer__WEBPACK_IMPORTED_MODULE_0__.encode)(text);\n    if (tokens.length <= maxTokens) {\n        return text;\n    }\n    // 수정된 부분\n    const truncatedTokens = tokens.slice(0, maxTokens);\n    return (0,gpt_tokenizer__WEBPACK_IMPORTED_MODULE_0__.decode)(truncatedTokens); // 잘못된 직접 구현 함수가 아니라 공식 함수 사용\n}\n/**\r\n * 대화 메시지를 청크로 분할합니다.\r\n * @param messages 메시지 배열\r\n * @param maxTokensPerChunk 청크당 최대 토큰 수 (기본값 500)\r\n * @returns 청크 배열\r\n */ function chunkMessages(messages, maxTokensPerChunk = 500) {\n    const chunks = [];\n    let currentChunk = \"\";\n    let currentTokens = 0;\n    let chunkIndex = 0;\n    for(let i = 0; i < messages.length; i++){\n        const message = messages[i];\n        const messageText = `[${message.role}]: ${message.content}`;\n        const messageTokens = (0,gpt_tokenizer__WEBPACK_IMPORTED_MODULE_0__.encode)(messageText).length;\n        // 단일 메시지가 청크 제한을 초과하는 경우 (분할 필요)\n        if (messageTokens > maxTokensPerChunk) {\n            // 현재 축적된 청크가 있다면 먼저 저장\n            if (currentTokens > 0) {\n                chunks.push({\n                    content: currentChunk.trim(),\n                    chunk_index: chunkIndex++\n                });\n                currentChunk = \"\";\n                currentTokens = 0;\n            }\n            // 긴 메시지를 여러 청크로 분할\n            const tokens = (0,gpt_tokenizer__WEBPACK_IMPORTED_MODULE_0__.encode)(messageText);\n            for(let j = 0; j < tokens.length; j += maxTokensPerChunk){\n                const chunkTokens = tokens.slice(j, j + maxTokensPerChunk);\n                chunks.push({\n                    content: (0,gpt_tokenizer__WEBPACK_IMPORTED_MODULE_0__.decode)(chunkTokens).trim(),\n                    chunk_index: chunkIndex++\n                });\n            }\n        } else if (currentTokens + messageTokens <= maxTokensPerChunk) {\n            currentChunk += (currentChunk ? \"\\n\\n\" : \"\") + messageText;\n            currentTokens += messageTokens;\n        } else {\n            chunks.push({\n                content: currentChunk.trim(),\n                chunk_index: chunkIndex++\n            });\n            currentChunk = messageText;\n            currentTokens = messageTokens;\n        }\n    }\n    // 마지막 청크 추가\n    if (currentTokens > 0) {\n        chunks.push({\n            content: currentChunk.trim(),\n            chunk_index: chunkIndex\n        });\n    }\n    return chunks;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/embeddings.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/langchain.ts":
/*!********************************!*\
  !*** ./src/utils/langchain.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateRagResponse: () => (/* binding */ generateRagResponse)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var _supabaseHandler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./supabaseHandler */ \"(rsc)/./src/utils/supabaseHandler.ts\");\n\n\n// OpenAI API 클라이언트 초기화\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_1__.OpenAI({\n    apiKey: process.env.OPENAI_API_KEY\n});\n/**\r\n * 질문에 대한 RAG 기반 응답을 생성합니다.\r\n * @param query 사용자 질문\r\n * @param similarity 유사도 임계값 (0.0 ~ 1.0)\r\n * @param limit 검색할 최대 청크 수\r\n * @returns 응답 객체\r\n */ async function generateRagResponse(query, similarity = 0.3, limit = 10) {\n    try {\n        console.log(`RAG 검색 시작 - 쿼리: \"${query}\", 유사도 임계값: ${similarity}, 제한: ${limit}`);\n        // 1. 유사한 청크 검색\n        const similarChunks = await (0,_supabaseHandler__WEBPACK_IMPORTED_MODULE_0__.searchSimilarChunks)(query, similarity, limit);\n        console.log(`검색된 청크 수: ${similarChunks?.length || 0}`);\n        if (!similarChunks || similarChunks.length === 0) {\n            console.log(\"관련 청크를 찾을 수 없음\");\n            // 메타 질문인지 확인 (supabaseHandler.ts에서도 체크하지만 여기서도 체크)\n            const metaQuestionPatterns = [\n                /이\\s*대화의?\\s*(핵심|요약|내용|주제)/i,\n                /대화를?\\s*(요약|정리)/i,\n                /요약해\\s*줘/i,\n                /핵심\\s*(내용|포인트)/i,\n                /주요\\s*(내용|포인트)/i\n            ];\n            const isMetaQuestion = metaQuestionPatterns.some((pattern)=>pattern.test(query));\n            if (isMetaQuestion) {\n                // 메타 질문에 대한 응답\n                return {\n                    answer: \"현재 저장된 대화의 요약 정보를 찾을 수 없습니다. 먼저 대화를 저장해주세요.\",\n                    sources: []\n                };\n            }\n            // 일반 질문에 대한 응답\n            return {\n                answer: \"관련 정보를 찾을 수 없습니다. 다른 질문을 시도하거나, 더 구체적인 질문을 해보세요. 현재 데이터베이스에 저장된 정보가 제한적일 수 있습니다.\",\n                sources: []\n            };\n        }\n        // 청크 유사도 로깅\n        similarChunks.forEach((chunk, i)=>{\n            console.log(`청크 ${i + 1}: 유사도 ${chunk.similarity?.toFixed(4) || \"N/A\"}, 세션 ID: ${chunk.chat_session_id}`);\n        });\n        // 2. 세션 정보 조회 - 타입 명시적 캐스팅 추가\n        const sessionIds = Array.from(new Set(similarChunks.map((chunk)=>chunk.chat_session_id)));\n        const sessionPromises = sessionIds.map((id)=>(0,_supabaseHandler__WEBPACK_IMPORTED_MODULE_0__.getChatSessionById)(id));\n        const sessions = await Promise.all(sessionPromises);\n        // 3. 컨텍스트 생성\n        const context = similarChunks.map((chunk, i)=>{\n            const session = sessions.find((s)=>s.id === chunk.chat_session_id);\n            return `[출처 ${i + 1}: ${session?.title || \"알 수 없음\"}]\\n${chunk.content}\\n`;\n        }).join(\"\\n\");\n        // 4. 출처 정보 생성\n        const sources = similarChunks.map((chunk)=>{\n            const session = sessions.find((s)=>s.id === chunk.chat_session_id);\n            return {\n                id: session?.id,\n                title: session?.title,\n                url: session?.url,\n                similarity: chunk.similarity\n            };\n        });\n        // 5. 프롬프트 생성\n        const prompt = `\r\n당신은 사용자의 질문에 대한 답변을 생성하는 지식 도우미입니다.\r\n아래 제공된 컨텍스트를 참고하여 질문에 대한 정확하고 상세한 답변을 제공해주세요.\r\n답변은 컨텍스트에 제공된 내용만을 토대로 해야 합니다.\r\n알 수 없거나 컨텍스트에 없는 정보에 대해서는 \"이 정보는 제공된 컨텍스트에 없습니다.\"라고 답해주세요.\r\n\r\n컨텍스트:\r\n${context}\r\n\r\n질문: ${query}\r\n\r\n답변:`;\n        // 6. OpenAI API로 응답 생성\n        const completion = await openai.chat.completions.create({\n            model: \"gpt-4.1-nano\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: \"당신은 정확하고 도움이 되는 질의응답 지식 도우미입니다.\"\n                },\n                {\n                    role: \"user\",\n                    content: prompt\n                }\n            ],\n            temperature: 0.5,\n            max_tokens: 1000\n        });\n        const answer = completion.choices[0].message.content?.trim() || \"응답을 생성할 수 없습니다.\";\n        return {\n            answer,\n            sources: sources.slice(0, 3) // 상위 3개 출처만 반환\n        };\n    } catch (error) {\n        console.error(\"RAG 응답 생성 오류:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/langchain.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/supabaseHandler.ts":
/*!**************************************!*\
  !*** ./src/utils/supabaseHandler.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkUrlExists: () => (/* binding */ checkUrlExists),\n/* harmony export */   getAllChatSessions: () => (/* binding */ getAllChatSessions),\n/* harmony export */   getChatSessionById: () => (/* binding */ getChatSessionById),\n/* harmony export */   getChunksBySessionId: () => (/* binding */ getChunksBySessionId),\n/* harmony export */   insertChatSession: () => (/* binding */ insertChatSession),\n/* harmony export */   processAndInsertChunks: () => (/* binding */ processAndInsertChunks),\n/* harmony export */   searchChatSessions: () => (/* binding */ searchChatSessions),\n/* harmony export */   searchSimilarChunks: () => (/* binding */ searchSimilarChunks),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase */ \"(rsc)/./src/lib/supabase.ts\");\n/* harmony import */ var _embeddings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./embeddings */ \"(rsc)/./src/utils/embeddings.ts\");\n\n\n// Supabase 클라이언트 재사용\nconst supabase = _lib_supabase__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin;\n/**\r\n * JSON 데이터를 안전하게 처리합니다.\r\n * PostgreSQL에 저장하기 전 유효하지 않은 문자나 구조를 제거합니다.\r\n */ function sanitizeJsonData(data) {\n    if (!data) return null;\n    if (typeof data === \"string\") {\n        // 문자열에서 제어 문자 제거 및 유니코드 문자 처리 개선\n        return data.replace(/[\\u0000-\\u001F\\u007F-\\u009F]/g, \" \") // 제어 문자 제거\n        .replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, (match)=>match) // 올바른 유니코드 이모지 유지\n        .replace(/\\uFFFD/g, \"\") // 대체 문자 제거\n        .replace(/\\s+/g, \" \") // 연속된 공백 제거\n        .trim();\n    }\n    if (Array.isArray(data)) {\n        // 배열의 각 항목 정제\n        return data.map((item)=>sanitizeJsonData(item));\n    }\n    if (typeof data === \"object\" && data !== null) {\n        // 객체의 각 필드 정제\n        const sanitized = {};\n        for(const key in data){\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                sanitized[key] = sanitizeJsonData(data[key]);\n            }\n        }\n        return sanitized;\n    }\n    // 기본 자료형은 그대로 반환\n    return data;\n}\n/**\r\n * URL이 이미 저장되어 있는지 확인합니다.\r\n * @param url 확인할 URL\r\n * @returns 중복 여부와 기존 세션 정보\r\n */ async function checkUrlExists(url) {\n    try {\n        // URL 정규화 (쿼리 파라미터 등 제거)\n        const normalizedUrl = new URL(url).origin + new URL(url).pathname;\n        // 정규화된 URL로 시작하는 세션 검색\n        const { data, error } = await supabase.from(\"chat_sessions\").select(\"id, title, url, summary, created_at\").ilike(\"url\", `${normalizedUrl}%`).limit(1);\n        if (error) {\n            console.error(\"URL 중복 확인 중 오류:\", error);\n            throw error;\n        }\n        if (data && data.length > 0) {\n            return {\n                exists: true,\n                session: data[0]\n            };\n        }\n        return {\n            exists: false\n        };\n    } catch (error) {\n        console.error(\"URL 중복 확인 중 오류:\", error);\n        // 오류 발생 시 안전하게 중복이 아닌 것으로 처리\n        return {\n            exists: false\n        };\n    }\n}\n/**\r\n * 대화 세션을 Supabase에 저장합니다.\r\n */ async function insertChatSession({ title, url, summary, messages, metadata = {}, skipDuplicateCheck = false }) {\n    try {\n        // URL 중복 확인 (skipDuplicateCheck가 false일 때만)\n        if (!skipDuplicateCheck && url) {\n            const { exists, session } = await checkUrlExists(url);\n            if (exists) {\n                console.log(`URL이 이미 존재합니다: ${url}`);\n                console.log(`기존 세션 정보: ${session?.title} (${session?.id})`);\n                return {\n                    id: session?.id,\n                    duplicate: true,\n                    message: \"이미 저장된 대화입니다.\"\n                };\n            }\n        }\n        // 데이터 정제\n        const sanitizedTitle = sanitizeJsonData(title);\n        const sanitizedSummary = sanitizeJsonData(summary);\n        const sanitizedMessages = sanitizeJsonData(messages);\n        const sanitizedMetadata = sanitizeJsonData(metadata);\n        // 요약 텍스트 임베딩 생성\n        const embedding = await (0,_embeddings__WEBPACK_IMPORTED_MODULE_1__.getEmbedding)(sanitizedSummary);\n        // 세션 데이터 삽입\n        const { data, error } = await supabase.from(\"chat_sessions\").insert({\n            title: sanitizedTitle,\n            url,\n            summary: sanitizedSummary,\n            messages: sanitizedMessages,\n            metadata: sanitizedMetadata,\n            embedding\n        }).select(\"id\").single();\n        if (error) throw error;\n        return {\n            ...data,\n            duplicate: false\n        };\n    } catch (error) {\n        console.error(\"대화 세션 저장 중 오류:\", error);\n        throw error;\n    }\n}\n/**\r\n * 대화 청크를 생성하고 Supabase에 저장합니다.\r\n */ async function processAndInsertChunks(sessionId, messages) {\n    try {\n        // 메시지 정제\n        const sanitizedMessages = sanitizeJsonData(messages);\n        // 메시지를 청크로 분할\n        const chunks = (0,_embeddings__WEBPACK_IMPORTED_MODULE_1__.chunkMessages)(sanitizedMessages);\n        console.log(\"\\uD83E\\uDDF1 분할된 청크:\", chunks);\n        // 각 청크에 대해 임베딩 생성 및 저장\n        const chunkPromises = chunks.map(async (chunk)=>{\n            // 청크 내용 정제\n            const sanitizedContent = sanitizeJsonData(chunk.content);\n            const embedding = await (0,_embeddings__WEBPACK_IMPORTED_MODULE_1__.getEmbedding)(sanitizedContent);\n            return {\n                chat_session_id: sessionId,\n                chunk_index: chunk.chunk_index,\n                content: sanitizedContent,\n                embedding\n            };\n        });\n        // 모든 청크 임베딩 처리 완료 대기\n        const chunksWithEmbeddings = await Promise.all(chunkPromises);\n        // 청크 데이터 삽입 (최대 1MB 제한으로 청크 10개씩 배치 처리)\n        const batchSize = 10;\n        const results = [];\n        for(let i = 0; i < chunksWithEmbeddings.length; i += batchSize){\n            const batch = chunksWithEmbeddings.slice(i, i + batchSize);\n            try {\n                const { data, error } = await supabase.from(\"chat_chunks\").insert(batch);\n                if (error) throw error;\n                results.push(data);\n            } catch (error) {\n                console.error(`청크 배치 ${i}/${chunksWithEmbeddings.length} 저장 중 오류:`, error);\n            // 개별 청크 에러를 기록하되 전체 프로세스는 계속 진행\n            }\n        }\n        return {\n            success: true,\n            count: chunksWithEmbeddings.length\n        };\n    } catch (error) {\n        console.error(\"청크 처리 및 저장 중 오류:\", error);\n        throw error;\n    }\n}\n/**\r\n * 유사한 청크를 검색합니다.\r\n */ async function searchSimilarChunks(query, similarity = 0.3, limit = 10) {\n    try {\n        // 메타 질문 감지 (예: \"이 대화의 핵심이 뭐야?\", \"요약해줘\" 등)\n        const metaQuestionPatterns = [\n            /이\\s*대화의?\\s*(핵심|요약|내용|주제)/i,\n            /대화를?\\s*(요약|정리)/i,\n            /요약해\\s*줘/i,\n            /핵심\\s*(내용|포인트)/i,\n            /주요\\s*(내용|포인트)/i\n        ];\n        const isMetaQuestion = metaQuestionPatterns.some((pattern)=>pattern.test(query));\n        if (isMetaQuestion) {\n            console.log(\"메타 질문 감지됨, 모든 세션의 요약 정보를 검색합니다.\");\n            // 메타 질문인 경우 가장 최근 세션의 요약 정보를 가져오기\n            const { data: sessionData, error: sessionError } = await supabase.from(\"chat_sessions\").select(\"id, title, summary\").order(\"created_at\", {\n                ascending: false\n            }).limit(1);\n            if (sessionError || !sessionData || sessionData.length === 0) {\n                console.warn(\"세션 데이터를 찾을 수 없습니다.\");\n                return [];\n            }\n            // 세션의 요약 정보를 청크로 변환하여 반환\n            const session = sessionData[0];\n            const fakeChunk = {\n                id: \"meta-question-chunk\",\n                chat_session_id: session.id,\n                chunk_index: 0,\n                content: `[요약]: ${session.summary}`,\n                similarity: 1.0\n            };\n            return [\n                fakeChunk\n            ];\n        }\n        console.log(`검색 쿼리: \"${query}\", 유사도 임계값: ${similarity}, 제한: ${limit}`);\n        // 쿼리 텍스트 정제\n        const sanitizedQuery = sanitizeJsonData(query);\n        console.log(`정제된 쿼리: \"${sanitizedQuery}\"`);\n        if (!sanitizedQuery || sanitizedQuery.trim().length < 2) {\n            console.warn(\"쿼리가 너무 짧거나 비어 있습니다\");\n            return [];\n        }\n        // 쿼리 텍스트 임베딩 생성\n        const queryEmbedding = await (0,_embeddings__WEBPACK_IMPORTED_MODULE_1__.getEmbedding)(sanitizedQuery);\n        console.log(`임베딩 생성 완료: ${queryEmbedding.length} 차원`);\n        // 유사한 청크 검색\n        const { data, error } = await supabase.rpc(\"match_chunks\", {\n            query_embedding: queryEmbedding,\n            match_threshold: similarity,\n            match_count: limit\n        });\n        if (error) {\n            console.error(\"유사 청크 검색 오류:\", error);\n            throw error;\n        }\n        console.log(`검색된 청크 수: ${data?.length || 0}`);\n        // 검색 결과가 없는 경우 유사도 임계값을 낮춰서 다시 시도 (2단계로 낮춤)\n        if (!data || data.length === 0) {\n            // 첫 번째 재시도: 임계값을 50% 낮춤\n            const lowerThreshold = similarity * 0.5;\n            console.log(`결과가 없어 유사도 임계값을 ${lowerThreshold.toFixed(2)}로 낮춰 재시도`);\n            const { data: retryData, error: retryError } = await supabase.rpc(\"match_chunks\", {\n                query_embedding: queryEmbedding,\n                match_threshold: lowerThreshold,\n                match_count: limit\n            });\n            if (retryError) {\n                console.error(\"낮은 임계값으로 재시도 중 오류:\", retryError);\n            } else if (retryData && retryData.length > 0) {\n                console.log(`낮은 임계값으로 ${retryData.length}개 청크 검색됨`);\n                return retryData;\n            } else {\n                // 두 번째 재시도: 매우 낮은 임계값 (0.1)으로 시도\n                const lowestThreshold = 0.1;\n                console.log(`결과가 여전히 없어 최저 임계값 ${lowestThreshold.toFixed(2)}로 재시도`);\n                const { data: lastRetryData, error: lastRetryError } = await supabase.rpc(\"match_chunks\", {\n                    query_embedding: queryEmbedding,\n                    match_threshold: lowestThreshold,\n                    match_count: limit\n                });\n                if (lastRetryError) {\n                    console.error(\"최저 임계값으로 재시도 중 오류:\", lastRetryError);\n                } else if (lastRetryData && lastRetryData.length > 0) {\n                    console.log(`최저 임계값으로 ${lastRetryData.length}개 청크 검색됨`);\n                    return lastRetryData;\n                }\n            }\n        }\n        return data || [];\n    } catch (error) {\n        console.error(\"유사 청크 검색 중 오류:\", error);\n        throw error;\n    }\n}\n/**\r\n * 세션 ID로 대화 세션을 조회합니다.\r\n */ async function getChatSessionById(id) {\n    const { data, error } = await supabase.from(\"chat_sessions\").select(\"*\").eq(\"id\", id).single();\n    if (error) throw error;\n    return data;\n}\n/**\r\n * 모든 대화 세션을 조회합니다.\r\n * 요약 정보만 반환합니다 (전체 메시지는 제외).\r\n */ async function getAllChatSessions() {\n    const { data, error } = await supabase.from(\"chat_sessions\").select(\"id, title, url, summary, created_at, metadata\").order(\"created_at\", {\n        ascending: false\n    });\n    if (error) throw error;\n    return data;\n}\n/**\r\n * 대화 세션의 모든 청크를 가져옵니다.\r\n */ async function getChunksBySessionId(sessionId) {\n    const { data, error } = await supabase.from(\"chat_chunks\").select(\"*\").eq(\"chat_session_id\", sessionId).order(\"chunk_index\", {\n        ascending: true\n    });\n    if (error) throw error;\n    return data;\n}\n/**\r\n * 키워드로 대화 세션을 검색합니다.\r\n */ async function searchChatSessions(keyword) {\n    const { data, error } = await supabase.from(\"chat_sessions\").select(\"id, title, url, summary, created_at, metadata\").or(`title.ilike.%${keyword}%,summary.ilike.%${keyword}%`).order(\"created_at\", {\n        ascending: false\n    });\n    if (error) throw error;\n    return data;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/supabaseHandler.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/gpt-tokenizer","vendor-chunks/@supabase","vendor-chunks/openai","vendor-chunks/tr46","vendor-chunks/web-streams-polyfill","vendor-chunks/node-fetch","vendor-chunks/whatwg-url","vendor-chunks/event-target-shim","vendor-chunks/agentkeepalive","vendor-chunks/form-data-encoder","vendor-chunks/webidl-conversions","vendor-chunks/abort-controller","vendor-chunks/ms","vendor-chunks/humanize-ms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Frag%2Fask%2Froute&page=%2Fapi%2Frag%2Fask%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Frag%2Fask%2Froute.ts&appDir=C%3A%5CpmkProject%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CpmkProject&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();